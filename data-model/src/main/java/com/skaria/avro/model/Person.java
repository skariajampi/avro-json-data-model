/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.skaria.avro.model;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;
import java.util.Optional;
@org.apache.avro.specific.AvroGenerated
public class Person extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6030266453118045127L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Person\",\"namespace\":\"com.skaria.avro.model\",\"fields\":[{\"name\":\"person\",\"type\":\"Person\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Person> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Person> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Person> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Person> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Person> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Person to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Person from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Person instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Person fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private com.skaria.avro.model.Person person;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Person() {}

  /**
   * All-args constructor.
   * @param person The new value for person
   */
  public Person(com.skaria.avro.model.Person person) {
    this.person = person;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return person;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: person = (com.skaria.avro.model.Person)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'person' field.
   * @return The value of the 'person' field.
   */
  public com.skaria.avro.model.Person getPerson() {
    return person;
  }

  /**
   * Gets the value of the 'person' field as an Optional&lt;com.skaria.avro.model.Person&gt;.
   * @return The value wrapped in an Optional&lt;com.skaria.avro.model.Person&gt;.
   */
  public Optional<com.skaria.avro.model.Person> getOptionalPerson() {
    return Optional.<com.skaria.avro.model.Person>ofNullable(person);
  }

  /**
   * Sets the value of the 'person' field.
   * @param value the value to set.
   */
  public void setPerson(com.skaria.avro.model.Person value) {
    this.person = value;
  }

  /**
   * Creates a new Person RecordBuilder.
   * @return A new Person RecordBuilder
   */
  public static com.skaria.avro.model.Person.Builder newBuilder() {
    return new com.skaria.avro.model.Person.Builder();
  }

  /**
   * Creates a new Person RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Person RecordBuilder
   */
  public static com.skaria.avro.model.Person.Builder newBuilder(com.skaria.avro.model.Person.Builder other) {
    if (other == null) {
      return new com.skaria.avro.model.Person.Builder();
    } else {
      return new com.skaria.avro.model.Person.Builder(other);
    }
  }

  /**
   * Creates a new Person RecordBuilder by copying an existing Person instance.
   * @param other The existing instance to copy.
   * @return A new Person RecordBuilder
   */
  public static com.skaria.avro.model.Person.Builder newBuilder(com.skaria.avro.model.Person other) {
    if (other == null) {
      return new com.skaria.avro.model.Person.Builder();
    } else {
      return new com.skaria.avro.model.Person.Builder(other);
    }
  }

  /**
   * RecordBuilder for Person instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Person>
    implements org.apache.avro.data.RecordBuilder<Person> {

    private com.skaria.avro.model.Person person;
    private com.skaria.avro.model.Person.Builder personBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.skaria.avro.model.Person.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.person)) {
        this.person = data().deepCopy(fields()[0].schema(), other.person);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (other.hasPersonBuilder()) {
        this.personBuilder = com.skaria.avro.model.Person.newBuilder(other.getPersonBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing Person instance
     * @param other The existing instance to copy.
     */
    private Builder(com.skaria.avro.model.Person other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.person)) {
        this.person = data().deepCopy(fields()[0].schema(), other.person);
        fieldSetFlags()[0] = true;
      }
      this.personBuilder = null;
    }

    /**
      * Gets the value of the 'person' field.
      * @return The value.
      */
    public com.skaria.avro.model.Person getPerson() {
      return person;
    }

    /**
      * Gets the value of the 'person' field as an Optional&lt;com.skaria.avro.model.Person&gt;.
      * @return The value wrapped in an Optional&lt;com.skaria.avro.model.Person&gt;.
      */
    public Optional<com.skaria.avro.model.Person> getOptionalPerson() {
      return Optional.<com.skaria.avro.model.Person>ofNullable(person);
    }

    /**
      * Sets the value of the 'person' field.
      * @param value The value of 'person'.
      * @return This builder.
      */
    public com.skaria.avro.model.Person.Builder setPerson(com.skaria.avro.model.Person value) {
      validate(fields()[0], value);
      this.personBuilder = null;
      this.person = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'person' field has been set.
      * @return True if the 'person' field has been set, false otherwise.
      */
    public boolean hasPerson() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'person' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.skaria.avro.model.Person.Builder getPersonBuilder() {
      if (personBuilder == null) {
        if (hasPerson()) {
          setPersonBuilder(com.skaria.avro.model.Person.newBuilder(person));
        } else {
          setPersonBuilder(com.skaria.avro.model.Person.newBuilder());
        }
      }
      return personBuilder;
    }

    /**
     * Sets the Builder instance for the 'person' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.skaria.avro.model.Person.Builder setPersonBuilder(com.skaria.avro.model.Person.Builder value) {
      clearPerson();
      personBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'person' field has an active Builder instance
     * @return True if the 'person' field has an active Builder instance
     */
    public boolean hasPersonBuilder() {
      return personBuilder != null;
    }

    /**
      * Clears the value of the 'person' field.
      * @return This builder.
      */
    public com.skaria.avro.model.Person.Builder clearPerson() {
      person = null;
      personBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Person build() {
      try {
        Person record = new Person();
        if (personBuilder != null) {
          try {
            record.person = this.personBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("person"));
            throw e;
          }
        } else {
          record.person = fieldSetFlags()[0] ? this.person : (com.skaria.avro.model.Person) defaultValue(fields()[0]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Person>
    WRITER$ = (org.apache.avro.io.DatumWriter<Person>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Person>
    READER$ = (org.apache.avro.io.DatumReader<Person>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    this.person.customEncode(out);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (this.person == null) {
        this.person = new com.skaria.avro.model.Person();
      }
      this.person.customDecode(in);

    } else {
      for (int i = 0; i < 1; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (this.person == null) {
            this.person = new com.skaria.avro.model.Person();
          }
          this.person.customDecode(in);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










