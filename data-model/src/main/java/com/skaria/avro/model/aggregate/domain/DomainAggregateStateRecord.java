/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.skaria.avro.model.aggregate.domain;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;
import java.util.Optional;
@org.apache.avro.specific.AvroGenerated
public class DomainAggregateStateRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 5999709552328607836L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"DomainAggregateStateRecord\",\"namespace\":\"com.skaria.avro.model.aggregate.domain\",\"fields\":[{\"name\":\"creationTimestamp\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"lastUpdatedTimestamp\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"person\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Person\",\"namespace\":\"com.skaria.avro.model\",\"fields\":[{\"name\":\"person\",\"type\":\"Person\"}]}],\"default\":null},{\"name\":\"someList\",\"type\":[\"null\",{\"type\":\"map\",\"values\":{\"type\":\"record\",\"name\":\"SomeList\",\"namespace\":\"com.skaria.avro.model\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"record\",\"name\":\"SomeListId\",\"fields\":[{\"name\":\"firstName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"lastName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}},{\"name\":\"firstName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"lastName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"middlename\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"age\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"action\",\"type\":{\"type\":\"enum\",\"name\":\"Action\",\"symbols\":[\"STOP\",\"GO\"]}}]},\"avro.java.string\":\"String\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<DomainAggregateStateRecord> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<DomainAggregateStateRecord> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<DomainAggregateStateRecord> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<DomainAggregateStateRecord> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<DomainAggregateStateRecord> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this DomainAggregateStateRecord to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a DomainAggregateStateRecord from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a DomainAggregateStateRecord instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static DomainAggregateStateRecord fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.time.Instant creationTimestamp;
  private java.time.Instant lastUpdatedTimestamp;
  private com.skaria.avro.model.Person person;
  private java.util.Map<java.lang.String,com.skaria.avro.model.SomeList> someList;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public DomainAggregateStateRecord() {}

  /**
   * All-args constructor.
   * @param creationTimestamp The new value for creationTimestamp
   * @param lastUpdatedTimestamp The new value for lastUpdatedTimestamp
   * @param person The new value for person
   * @param someList The new value for someList
   */
  public DomainAggregateStateRecord(java.time.Instant creationTimestamp, java.time.Instant lastUpdatedTimestamp, com.skaria.avro.model.Person person, java.util.Map<java.lang.String,com.skaria.avro.model.SomeList> someList) {
    this.creationTimestamp = creationTimestamp.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    this.lastUpdatedTimestamp = lastUpdatedTimestamp.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    this.person = person;
    this.someList = someList;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return creationTimestamp;
    case 1: return lastUpdatedTimestamp;
    case 2: return person;
    case 3: return someList;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      null,
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: creationTimestamp = (java.time.Instant)value$; break;
    case 1: lastUpdatedTimestamp = (java.time.Instant)value$; break;
    case 2: person = (com.skaria.avro.model.Person)value$; break;
    case 3: someList = (java.util.Map<java.lang.String,com.skaria.avro.model.SomeList>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'creationTimestamp' field.
   * @return The value of the 'creationTimestamp' field.
   */
  public java.time.Instant getCreationTimestamp() {
    return creationTimestamp;
  }

  /**
   * Gets the value of the 'creationTimestamp' field as an Optional&lt;java.time.Instant&gt;.
   * @return The value wrapped in an Optional&lt;java.time.Instant&gt;.
   */
  public Optional<java.time.Instant> getOptionalCreationTimestamp() {
    return Optional.<java.time.Instant>ofNullable(creationTimestamp);
  }

  /**
   * Sets the value of the 'creationTimestamp' field.
   * @param value the value to set.
   */
  public void setCreationTimestamp(java.time.Instant value) {
    this.creationTimestamp = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Gets the value of the 'lastUpdatedTimestamp' field.
   * @return The value of the 'lastUpdatedTimestamp' field.
   */
  public java.time.Instant getLastUpdatedTimestamp() {
    return lastUpdatedTimestamp;
  }

  /**
   * Gets the value of the 'lastUpdatedTimestamp' field as an Optional&lt;java.time.Instant&gt;.
   * @return The value wrapped in an Optional&lt;java.time.Instant&gt;.
   */
  public Optional<java.time.Instant> getOptionalLastUpdatedTimestamp() {
    return Optional.<java.time.Instant>ofNullable(lastUpdatedTimestamp);
  }

  /**
   * Sets the value of the 'lastUpdatedTimestamp' field.
   * @param value the value to set.
   */
  public void setLastUpdatedTimestamp(java.time.Instant value) {
    this.lastUpdatedTimestamp = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Gets the value of the 'person' field.
   * @return The value of the 'person' field.
   */
  public com.skaria.avro.model.Person getPerson() {
    return person;
  }

  /**
   * Gets the value of the 'person' field as an Optional&lt;com.skaria.avro.model.Person&gt;.
   * @return The value wrapped in an Optional&lt;com.skaria.avro.model.Person&gt;.
   */
  public Optional<com.skaria.avro.model.Person> getOptionalPerson() {
    return Optional.<com.skaria.avro.model.Person>ofNullable(person);
  }

  /**
   * Sets the value of the 'person' field.
   * @param value the value to set.
   */
  public void setPerson(com.skaria.avro.model.Person value) {
    this.person = value;
  }

  /**
   * Gets the value of the 'someList' field.
   * @return The value of the 'someList' field.
   */
  public java.util.Map<java.lang.String,com.skaria.avro.model.SomeList> getSomeList() {
    return someList;
  }

  /**
   * Gets the value of the 'someList' field as an Optional&lt;java.util.Map<java.lang.String,com.skaria.avro.model.SomeList>&gt;.
   * @return The value wrapped in an Optional&lt;java.util.Map<java.lang.String,com.skaria.avro.model.SomeList>&gt;.
   */
  public Optional<java.util.Map<java.lang.String,com.skaria.avro.model.SomeList>> getOptionalSomeList() {
    return Optional.<java.util.Map<java.lang.String,com.skaria.avro.model.SomeList>>ofNullable(someList);
  }

  /**
   * Sets the value of the 'someList' field.
   * @param value the value to set.
   */
  public void setSomeList(java.util.Map<java.lang.String,com.skaria.avro.model.SomeList> value) {
    this.someList = value;
  }

  /**
   * Creates a new DomainAggregateStateRecord RecordBuilder.
   * @return A new DomainAggregateStateRecord RecordBuilder
   */
  public static com.skaria.avro.model.aggregate.domain.DomainAggregateStateRecord.Builder newBuilder() {
    return new com.skaria.avro.model.aggregate.domain.DomainAggregateStateRecord.Builder();
  }

  /**
   * Creates a new DomainAggregateStateRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new DomainAggregateStateRecord RecordBuilder
   */
  public static com.skaria.avro.model.aggregate.domain.DomainAggregateStateRecord.Builder newBuilder(com.skaria.avro.model.aggregate.domain.DomainAggregateStateRecord.Builder other) {
    if (other == null) {
      return new com.skaria.avro.model.aggregate.domain.DomainAggregateStateRecord.Builder();
    } else {
      return new com.skaria.avro.model.aggregate.domain.DomainAggregateStateRecord.Builder(other);
    }
  }

  /**
   * Creates a new DomainAggregateStateRecord RecordBuilder by copying an existing DomainAggregateStateRecord instance.
   * @param other The existing instance to copy.
   * @return A new DomainAggregateStateRecord RecordBuilder
   */
  public static com.skaria.avro.model.aggregate.domain.DomainAggregateStateRecord.Builder newBuilder(com.skaria.avro.model.aggregate.domain.DomainAggregateStateRecord other) {
    if (other == null) {
      return new com.skaria.avro.model.aggregate.domain.DomainAggregateStateRecord.Builder();
    } else {
      return new com.skaria.avro.model.aggregate.domain.DomainAggregateStateRecord.Builder(other);
    }
  }

  /**
   * RecordBuilder for DomainAggregateStateRecord instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<DomainAggregateStateRecord>
    implements org.apache.avro.data.RecordBuilder<DomainAggregateStateRecord> {

    private java.time.Instant creationTimestamp;
    private java.time.Instant lastUpdatedTimestamp;
    private com.skaria.avro.model.Person person;
    private com.skaria.avro.model.Person.Builder personBuilder;
    private java.util.Map<java.lang.String,com.skaria.avro.model.SomeList> someList;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.skaria.avro.model.aggregate.domain.DomainAggregateStateRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.creationTimestamp)) {
        this.creationTimestamp = data().deepCopy(fields()[0].schema(), other.creationTimestamp);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.lastUpdatedTimestamp)) {
        this.lastUpdatedTimestamp = data().deepCopy(fields()[1].schema(), other.lastUpdatedTimestamp);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.person)) {
        this.person = data().deepCopy(fields()[2].schema(), other.person);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (other.hasPersonBuilder()) {
        this.personBuilder = com.skaria.avro.model.Person.newBuilder(other.getPersonBuilder());
      }
      if (isValidValue(fields()[3], other.someList)) {
        this.someList = data().deepCopy(fields()[3].schema(), other.someList);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing DomainAggregateStateRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(com.skaria.avro.model.aggregate.domain.DomainAggregateStateRecord other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.creationTimestamp)) {
        this.creationTimestamp = data().deepCopy(fields()[0].schema(), other.creationTimestamp);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.lastUpdatedTimestamp)) {
        this.lastUpdatedTimestamp = data().deepCopy(fields()[1].schema(), other.lastUpdatedTimestamp);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.person)) {
        this.person = data().deepCopy(fields()[2].schema(), other.person);
        fieldSetFlags()[2] = true;
      }
      this.personBuilder = null;
      if (isValidValue(fields()[3], other.someList)) {
        this.someList = data().deepCopy(fields()[3].schema(), other.someList);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'creationTimestamp' field.
      * @return The value.
      */
    public java.time.Instant getCreationTimestamp() {
      return creationTimestamp;
    }

    /**
      * Gets the value of the 'creationTimestamp' field as an Optional&lt;java.time.Instant&gt;.
      * @return The value wrapped in an Optional&lt;java.time.Instant&gt;.
      */
    public Optional<java.time.Instant> getOptionalCreationTimestamp() {
      return Optional.<java.time.Instant>ofNullable(creationTimestamp);
    }

    /**
      * Sets the value of the 'creationTimestamp' field.
      * @param value The value of 'creationTimestamp'.
      * @return This builder.
      */
    public com.skaria.avro.model.aggregate.domain.DomainAggregateStateRecord.Builder setCreationTimestamp(java.time.Instant value) {
      validate(fields()[0], value);
      this.creationTimestamp = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'creationTimestamp' field has been set.
      * @return True if the 'creationTimestamp' field has been set, false otherwise.
      */
    public boolean hasCreationTimestamp() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'creationTimestamp' field.
      * @return This builder.
      */
    public com.skaria.avro.model.aggregate.domain.DomainAggregateStateRecord.Builder clearCreationTimestamp() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'lastUpdatedTimestamp' field.
      * @return The value.
      */
    public java.time.Instant getLastUpdatedTimestamp() {
      return lastUpdatedTimestamp;
    }

    /**
      * Gets the value of the 'lastUpdatedTimestamp' field as an Optional&lt;java.time.Instant&gt;.
      * @return The value wrapped in an Optional&lt;java.time.Instant&gt;.
      */
    public Optional<java.time.Instant> getOptionalLastUpdatedTimestamp() {
      return Optional.<java.time.Instant>ofNullable(lastUpdatedTimestamp);
    }

    /**
      * Sets the value of the 'lastUpdatedTimestamp' field.
      * @param value The value of 'lastUpdatedTimestamp'.
      * @return This builder.
      */
    public com.skaria.avro.model.aggregate.domain.DomainAggregateStateRecord.Builder setLastUpdatedTimestamp(java.time.Instant value) {
      validate(fields()[1], value);
      this.lastUpdatedTimestamp = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'lastUpdatedTimestamp' field has been set.
      * @return True if the 'lastUpdatedTimestamp' field has been set, false otherwise.
      */
    public boolean hasLastUpdatedTimestamp() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'lastUpdatedTimestamp' field.
      * @return This builder.
      */
    public com.skaria.avro.model.aggregate.domain.DomainAggregateStateRecord.Builder clearLastUpdatedTimestamp() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'person' field.
      * @return The value.
      */
    public com.skaria.avro.model.Person getPerson() {
      return person;
    }

    /**
      * Gets the value of the 'person' field as an Optional&lt;com.skaria.avro.model.Person&gt;.
      * @return The value wrapped in an Optional&lt;com.skaria.avro.model.Person&gt;.
      */
    public Optional<com.skaria.avro.model.Person> getOptionalPerson() {
      return Optional.<com.skaria.avro.model.Person>ofNullable(person);
    }

    /**
      * Sets the value of the 'person' field.
      * @param value The value of 'person'.
      * @return This builder.
      */
    public com.skaria.avro.model.aggregate.domain.DomainAggregateStateRecord.Builder setPerson(com.skaria.avro.model.Person value) {
      validate(fields()[2], value);
      this.personBuilder = null;
      this.person = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'person' field has been set.
      * @return True if the 'person' field has been set, false otherwise.
      */
    public boolean hasPerson() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'person' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.skaria.avro.model.Person.Builder getPersonBuilder() {
      if (personBuilder == null) {
        if (hasPerson()) {
          setPersonBuilder(com.skaria.avro.model.Person.newBuilder(person));
        } else {
          setPersonBuilder(com.skaria.avro.model.Person.newBuilder());
        }
      }
      return personBuilder;
    }

    /**
     * Sets the Builder instance for the 'person' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.skaria.avro.model.aggregate.domain.DomainAggregateStateRecord.Builder setPersonBuilder(com.skaria.avro.model.Person.Builder value) {
      clearPerson();
      personBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'person' field has an active Builder instance
     * @return True if the 'person' field has an active Builder instance
     */
    public boolean hasPersonBuilder() {
      return personBuilder != null;
    }

    /**
      * Clears the value of the 'person' field.
      * @return This builder.
      */
    public com.skaria.avro.model.aggregate.domain.DomainAggregateStateRecord.Builder clearPerson() {
      person = null;
      personBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'someList' field.
      * @return The value.
      */
    public java.util.Map<java.lang.String,com.skaria.avro.model.SomeList> getSomeList() {
      return someList;
    }

    /**
      * Gets the value of the 'someList' field as an Optional&lt;java.util.Map<java.lang.String,com.skaria.avro.model.SomeList>&gt;.
      * @return The value wrapped in an Optional&lt;java.util.Map<java.lang.String,com.skaria.avro.model.SomeList>&gt;.
      */
    public Optional<java.util.Map<java.lang.String,com.skaria.avro.model.SomeList>> getOptionalSomeList() {
      return Optional.<java.util.Map<java.lang.String,com.skaria.avro.model.SomeList>>ofNullable(someList);
    }

    /**
      * Sets the value of the 'someList' field.
      * @param value The value of 'someList'.
      * @return This builder.
      */
    public com.skaria.avro.model.aggregate.domain.DomainAggregateStateRecord.Builder setSomeList(java.util.Map<java.lang.String,com.skaria.avro.model.SomeList> value) {
      validate(fields()[3], value);
      this.someList = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'someList' field has been set.
      * @return True if the 'someList' field has been set, false otherwise.
      */
    public boolean hasSomeList() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'someList' field.
      * @return This builder.
      */
    public com.skaria.avro.model.aggregate.domain.DomainAggregateStateRecord.Builder clearSomeList() {
      someList = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public DomainAggregateStateRecord build() {
      try {
        DomainAggregateStateRecord record = new DomainAggregateStateRecord();
        record.creationTimestamp = fieldSetFlags()[0] ? this.creationTimestamp : (java.time.Instant) defaultValue(fields()[0]);
        record.lastUpdatedTimestamp = fieldSetFlags()[1] ? this.lastUpdatedTimestamp : (java.time.Instant) defaultValue(fields()[1]);
        if (personBuilder != null) {
          try {
            record.person = this.personBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("person"));
            throw e;
          }
        } else {
          record.person = fieldSetFlags()[2] ? this.person : (com.skaria.avro.model.Person) defaultValue(fields()[2]);
        }
        record.someList = fieldSetFlags()[3] ? this.someList : (java.util.Map<java.lang.String,com.skaria.avro.model.SomeList>) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<DomainAggregateStateRecord>
    WRITER$ = (org.apache.avro.io.DatumWriter<DomainAggregateStateRecord>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<DomainAggregateStateRecord>
    READER$ = (org.apache.avro.io.DatumReader<DomainAggregateStateRecord>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










