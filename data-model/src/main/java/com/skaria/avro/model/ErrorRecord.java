/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.skaria.avro.model;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;
import java.util.Optional;
@org.apache.avro.specific.AvroGenerated
public class ErrorRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8503799943150093831L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ErrorRecord\",\"namespace\":\"com.skaria.avro.model\",\"fields\":[{\"name\":\"correlationId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"timestamp\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"message\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"componentType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"componentInstance\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"entityId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"entityType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"exceptionStackTrace\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"payload\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"externalRefId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"invariantFailures\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"InvariantFailureRecord\",\"namespace\":\"com.skaria.avro.model.aggregate\",\"fields\":[{\"name\":\"invariantId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"invariantName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"externalDescription\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"internalDescription\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ErrorRecord> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ErrorRecord> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<ErrorRecord> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<ErrorRecord> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<ErrorRecord> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this ErrorRecord to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a ErrorRecord from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a ErrorRecord instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static ErrorRecord fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.String correlationId;
  private java.lang.String timestamp;
  private java.lang.String message;
  private java.lang.String componentType;
  private java.lang.String componentInstance;
  private java.lang.String entityId;
  private java.lang.String entityType;
  private java.lang.String exceptionStackTrace;
  private java.lang.String payload;
  private java.lang.String externalRefId;
  private java.util.List<com.skaria.avro.model.aggregate.InvariantFailureRecord> invariantFailures;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ErrorRecord() {}

  /**
   * All-args constructor.
   * @param correlationId The new value for correlationId
   * @param timestamp The new value for timestamp
   * @param message The new value for message
   * @param componentType The new value for componentType
   * @param componentInstance The new value for componentInstance
   * @param entityId The new value for entityId
   * @param entityType The new value for entityType
   * @param exceptionStackTrace The new value for exceptionStackTrace
   * @param payload The new value for payload
   * @param externalRefId The new value for externalRefId
   * @param invariantFailures The new value for invariantFailures
   */
  public ErrorRecord(java.lang.String correlationId, java.lang.String timestamp, java.lang.String message, java.lang.String componentType, java.lang.String componentInstance, java.lang.String entityId, java.lang.String entityType, java.lang.String exceptionStackTrace, java.lang.String payload, java.lang.String externalRefId, java.util.List<com.skaria.avro.model.aggregate.InvariantFailureRecord> invariantFailures) {
    this.correlationId = correlationId;
    this.timestamp = timestamp;
    this.message = message;
    this.componentType = componentType;
    this.componentInstance = componentInstance;
    this.entityId = entityId;
    this.entityType = entityType;
    this.exceptionStackTrace = exceptionStackTrace;
    this.payload = payload;
    this.externalRefId = externalRefId;
    this.invariantFailures = invariantFailures;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return correlationId;
    case 1: return timestamp;
    case 2: return message;
    case 3: return componentType;
    case 4: return componentInstance;
    case 5: return entityId;
    case 6: return entityType;
    case 7: return exceptionStackTrace;
    case 8: return payload;
    case 9: return externalRefId;
    case 10: return invariantFailures;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: correlationId = value$ != null ? value$.toString() : null; break;
    case 1: timestamp = value$ != null ? value$.toString() : null; break;
    case 2: message = value$ != null ? value$.toString() : null; break;
    case 3: componentType = value$ != null ? value$.toString() : null; break;
    case 4: componentInstance = value$ != null ? value$.toString() : null; break;
    case 5: entityId = value$ != null ? value$.toString() : null; break;
    case 6: entityType = value$ != null ? value$.toString() : null; break;
    case 7: exceptionStackTrace = value$ != null ? value$.toString() : null; break;
    case 8: payload = value$ != null ? value$.toString() : null; break;
    case 9: externalRefId = value$ != null ? value$.toString() : null; break;
    case 10: invariantFailures = (java.util.List<com.skaria.avro.model.aggregate.InvariantFailureRecord>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'correlationId' field.
   * @return The value of the 'correlationId' field.
   */
  public java.lang.String getCorrelationId() {
    return correlationId;
  }

  /**
   * Gets the value of the 'correlationId' field as an Optional&lt;java.lang.String&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
   */
  public Optional<java.lang.String> getOptionalCorrelationId() {
    return Optional.<java.lang.String>ofNullable(correlationId);
  }

  /**
   * Sets the value of the 'correlationId' field.
   * @param value the value to set.
   */
  public void setCorrelationId(java.lang.String value) {
    this.correlationId = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public java.lang.String getTimestamp() {
    return timestamp;
  }

  /**
   * Gets the value of the 'timestamp' field as an Optional&lt;java.lang.String&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
   */
  public Optional<java.lang.String> getOptionalTimestamp() {
    return Optional.<java.lang.String>ofNullable(timestamp);
  }

  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(java.lang.String value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'message' field.
   * @return The value of the 'message' field.
   */
  public java.lang.String getMessage() {
    return message;
  }

  /**
   * Gets the value of the 'message' field as an Optional&lt;java.lang.String&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
   */
  public Optional<java.lang.String> getOptionalMessage() {
    return Optional.<java.lang.String>ofNullable(message);
  }

  /**
   * Sets the value of the 'message' field.
   * @param value the value to set.
   */
  public void setMessage(java.lang.String value) {
    this.message = value;
  }

  /**
   * Gets the value of the 'componentType' field.
   * @return The value of the 'componentType' field.
   */
  public java.lang.String getComponentType() {
    return componentType;
  }

  /**
   * Gets the value of the 'componentType' field as an Optional&lt;java.lang.String&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
   */
  public Optional<java.lang.String> getOptionalComponentType() {
    return Optional.<java.lang.String>ofNullable(componentType);
  }

  /**
   * Sets the value of the 'componentType' field.
   * @param value the value to set.
   */
  public void setComponentType(java.lang.String value) {
    this.componentType = value;
  }

  /**
   * Gets the value of the 'componentInstance' field.
   * @return The value of the 'componentInstance' field.
   */
  public java.lang.String getComponentInstance() {
    return componentInstance;
  }

  /**
   * Gets the value of the 'componentInstance' field as an Optional&lt;java.lang.String&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
   */
  public Optional<java.lang.String> getOptionalComponentInstance() {
    return Optional.<java.lang.String>ofNullable(componentInstance);
  }

  /**
   * Sets the value of the 'componentInstance' field.
   * @param value the value to set.
   */
  public void setComponentInstance(java.lang.String value) {
    this.componentInstance = value;
  }

  /**
   * Gets the value of the 'entityId' field.
   * @return The value of the 'entityId' field.
   */
  public java.lang.String getEntityId() {
    return entityId;
  }

  /**
   * Gets the value of the 'entityId' field as an Optional&lt;java.lang.String&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
   */
  public Optional<java.lang.String> getOptionalEntityId() {
    return Optional.<java.lang.String>ofNullable(entityId);
  }

  /**
   * Sets the value of the 'entityId' field.
   * @param value the value to set.
   */
  public void setEntityId(java.lang.String value) {
    this.entityId = value;
  }

  /**
   * Gets the value of the 'entityType' field.
   * @return The value of the 'entityType' field.
   */
  public java.lang.String getEntityType() {
    return entityType;
  }

  /**
   * Gets the value of the 'entityType' field as an Optional&lt;java.lang.String&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
   */
  public Optional<java.lang.String> getOptionalEntityType() {
    return Optional.<java.lang.String>ofNullable(entityType);
  }

  /**
   * Sets the value of the 'entityType' field.
   * @param value the value to set.
   */
  public void setEntityType(java.lang.String value) {
    this.entityType = value;
  }

  /**
   * Gets the value of the 'exceptionStackTrace' field.
   * @return The value of the 'exceptionStackTrace' field.
   */
  public java.lang.String getExceptionStackTrace() {
    return exceptionStackTrace;
  }

  /**
   * Gets the value of the 'exceptionStackTrace' field as an Optional&lt;java.lang.String&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
   */
  public Optional<java.lang.String> getOptionalExceptionStackTrace() {
    return Optional.<java.lang.String>ofNullable(exceptionStackTrace);
  }

  /**
   * Sets the value of the 'exceptionStackTrace' field.
   * @param value the value to set.
   */
  public void setExceptionStackTrace(java.lang.String value) {
    this.exceptionStackTrace = value;
  }

  /**
   * Gets the value of the 'payload' field.
   * @return The value of the 'payload' field.
   */
  public java.lang.String getPayload() {
    return payload;
  }

  /**
   * Gets the value of the 'payload' field as an Optional&lt;java.lang.String&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
   */
  public Optional<java.lang.String> getOptionalPayload() {
    return Optional.<java.lang.String>ofNullable(payload);
  }

  /**
   * Sets the value of the 'payload' field.
   * @param value the value to set.
   */
  public void setPayload(java.lang.String value) {
    this.payload = value;
  }

  /**
   * Gets the value of the 'externalRefId' field.
   * @return The value of the 'externalRefId' field.
   */
  public java.lang.String getExternalRefId() {
    return externalRefId;
  }

  /**
   * Gets the value of the 'externalRefId' field as an Optional&lt;java.lang.String&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
   */
  public Optional<java.lang.String> getOptionalExternalRefId() {
    return Optional.<java.lang.String>ofNullable(externalRefId);
  }

  /**
   * Sets the value of the 'externalRefId' field.
   * @param value the value to set.
   */
  public void setExternalRefId(java.lang.String value) {
    this.externalRefId = value;
  }

  /**
   * Gets the value of the 'invariantFailures' field.
   * @return The value of the 'invariantFailures' field.
   */
  public java.util.List<com.skaria.avro.model.aggregate.InvariantFailureRecord> getInvariantFailures() {
    return invariantFailures;
  }

  /**
   * Gets the value of the 'invariantFailures' field as an Optional&lt;java.util.List<com.skaria.avro.model.aggregate.InvariantFailureRecord>&gt;.
   * @return The value wrapped in an Optional&lt;java.util.List<com.skaria.avro.model.aggregate.InvariantFailureRecord>&gt;.
   */
  public Optional<java.util.List<com.skaria.avro.model.aggregate.InvariantFailureRecord>> getOptionalInvariantFailures() {
    return Optional.<java.util.List<com.skaria.avro.model.aggregate.InvariantFailureRecord>>ofNullable(invariantFailures);
  }

  /**
   * Sets the value of the 'invariantFailures' field.
   * @param value the value to set.
   */
  public void setInvariantFailures(java.util.List<com.skaria.avro.model.aggregate.InvariantFailureRecord> value) {
    this.invariantFailures = value;
  }

  /**
   * Creates a new ErrorRecord RecordBuilder.
   * @return A new ErrorRecord RecordBuilder
   */
  public static com.skaria.avro.model.ErrorRecord.Builder newBuilder() {
    return new com.skaria.avro.model.ErrorRecord.Builder();
  }

  /**
   * Creates a new ErrorRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ErrorRecord RecordBuilder
   */
  public static com.skaria.avro.model.ErrorRecord.Builder newBuilder(com.skaria.avro.model.ErrorRecord.Builder other) {
    if (other == null) {
      return new com.skaria.avro.model.ErrorRecord.Builder();
    } else {
      return new com.skaria.avro.model.ErrorRecord.Builder(other);
    }
  }

  /**
   * Creates a new ErrorRecord RecordBuilder by copying an existing ErrorRecord instance.
   * @param other The existing instance to copy.
   * @return A new ErrorRecord RecordBuilder
   */
  public static com.skaria.avro.model.ErrorRecord.Builder newBuilder(com.skaria.avro.model.ErrorRecord other) {
    if (other == null) {
      return new com.skaria.avro.model.ErrorRecord.Builder();
    } else {
      return new com.skaria.avro.model.ErrorRecord.Builder(other);
    }
  }

  /**
   * RecordBuilder for ErrorRecord instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ErrorRecord>
    implements org.apache.avro.data.RecordBuilder<ErrorRecord> {

    private java.lang.String correlationId;
    private java.lang.String timestamp;
    private java.lang.String message;
    private java.lang.String componentType;
    private java.lang.String componentInstance;
    private java.lang.String entityId;
    private java.lang.String entityType;
    private java.lang.String exceptionStackTrace;
    private java.lang.String payload;
    private java.lang.String externalRefId;
    private java.util.List<com.skaria.avro.model.aggregate.InvariantFailureRecord> invariantFailures;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.skaria.avro.model.ErrorRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.correlationId)) {
        this.correlationId = data().deepCopy(fields()[0].schema(), other.correlationId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[1].schema(), other.timestamp);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.message)) {
        this.message = data().deepCopy(fields()[2].schema(), other.message);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.componentType)) {
        this.componentType = data().deepCopy(fields()[3].schema(), other.componentType);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.componentInstance)) {
        this.componentInstance = data().deepCopy(fields()[4].schema(), other.componentInstance);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.entityId)) {
        this.entityId = data().deepCopy(fields()[5].schema(), other.entityId);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.entityType)) {
        this.entityType = data().deepCopy(fields()[6].schema(), other.entityType);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.exceptionStackTrace)) {
        this.exceptionStackTrace = data().deepCopy(fields()[7].schema(), other.exceptionStackTrace);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.payload)) {
        this.payload = data().deepCopy(fields()[8].schema(), other.payload);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.externalRefId)) {
        this.externalRefId = data().deepCopy(fields()[9].schema(), other.externalRefId);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.invariantFailures)) {
        this.invariantFailures = data().deepCopy(fields()[10].schema(), other.invariantFailures);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
    }

    /**
     * Creates a Builder by copying an existing ErrorRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(com.skaria.avro.model.ErrorRecord other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.correlationId)) {
        this.correlationId = data().deepCopy(fields()[0].schema(), other.correlationId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[1].schema(), other.timestamp);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.message)) {
        this.message = data().deepCopy(fields()[2].schema(), other.message);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.componentType)) {
        this.componentType = data().deepCopy(fields()[3].schema(), other.componentType);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.componentInstance)) {
        this.componentInstance = data().deepCopy(fields()[4].schema(), other.componentInstance);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.entityId)) {
        this.entityId = data().deepCopy(fields()[5].schema(), other.entityId);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.entityType)) {
        this.entityType = data().deepCopy(fields()[6].schema(), other.entityType);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.exceptionStackTrace)) {
        this.exceptionStackTrace = data().deepCopy(fields()[7].schema(), other.exceptionStackTrace);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.payload)) {
        this.payload = data().deepCopy(fields()[8].schema(), other.payload);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.externalRefId)) {
        this.externalRefId = data().deepCopy(fields()[9].schema(), other.externalRefId);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.invariantFailures)) {
        this.invariantFailures = data().deepCopy(fields()[10].schema(), other.invariantFailures);
        fieldSetFlags()[10] = true;
      }
    }

    /**
      * Gets the value of the 'correlationId' field.
      * @return The value.
      */
    public java.lang.String getCorrelationId() {
      return correlationId;
    }

    /**
      * Gets the value of the 'correlationId' field as an Optional&lt;java.lang.String&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
      */
    public Optional<java.lang.String> getOptionalCorrelationId() {
      return Optional.<java.lang.String>ofNullable(correlationId);
    }

    /**
      * Sets the value of the 'correlationId' field.
      * @param value The value of 'correlationId'.
      * @return This builder.
      */
    public com.skaria.avro.model.ErrorRecord.Builder setCorrelationId(java.lang.String value) {
      validate(fields()[0], value);
      this.correlationId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'correlationId' field has been set.
      * @return True if the 'correlationId' field has been set, false otherwise.
      */
    public boolean hasCorrelationId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'correlationId' field.
      * @return This builder.
      */
    public com.skaria.avro.model.ErrorRecord.Builder clearCorrelationId() {
      correlationId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public java.lang.String getTimestamp() {
      return timestamp;
    }

    /**
      * Gets the value of the 'timestamp' field as an Optional&lt;java.lang.String&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
      */
    public Optional<java.lang.String> getOptionalTimestamp() {
      return Optional.<java.lang.String>ofNullable(timestamp);
    }

    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public com.skaria.avro.model.ErrorRecord.Builder setTimestamp(java.lang.String value) {
      validate(fields()[1], value);
      this.timestamp = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public com.skaria.avro.model.ErrorRecord.Builder clearTimestamp() {
      timestamp = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'message' field.
      * @return The value.
      */
    public java.lang.String getMessage() {
      return message;
    }

    /**
      * Gets the value of the 'message' field as an Optional&lt;java.lang.String&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
      */
    public Optional<java.lang.String> getOptionalMessage() {
      return Optional.<java.lang.String>ofNullable(message);
    }

    /**
      * Sets the value of the 'message' field.
      * @param value The value of 'message'.
      * @return This builder.
      */
    public com.skaria.avro.model.ErrorRecord.Builder setMessage(java.lang.String value) {
      validate(fields()[2], value);
      this.message = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'message' field has been set.
      * @return True if the 'message' field has been set, false otherwise.
      */
    public boolean hasMessage() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'message' field.
      * @return This builder.
      */
    public com.skaria.avro.model.ErrorRecord.Builder clearMessage() {
      message = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'componentType' field.
      * @return The value.
      */
    public java.lang.String getComponentType() {
      return componentType;
    }

    /**
      * Gets the value of the 'componentType' field as an Optional&lt;java.lang.String&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
      */
    public Optional<java.lang.String> getOptionalComponentType() {
      return Optional.<java.lang.String>ofNullable(componentType);
    }

    /**
      * Sets the value of the 'componentType' field.
      * @param value The value of 'componentType'.
      * @return This builder.
      */
    public com.skaria.avro.model.ErrorRecord.Builder setComponentType(java.lang.String value) {
      validate(fields()[3], value);
      this.componentType = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'componentType' field has been set.
      * @return True if the 'componentType' field has been set, false otherwise.
      */
    public boolean hasComponentType() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'componentType' field.
      * @return This builder.
      */
    public com.skaria.avro.model.ErrorRecord.Builder clearComponentType() {
      componentType = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'componentInstance' field.
      * @return The value.
      */
    public java.lang.String getComponentInstance() {
      return componentInstance;
    }

    /**
      * Gets the value of the 'componentInstance' field as an Optional&lt;java.lang.String&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
      */
    public Optional<java.lang.String> getOptionalComponentInstance() {
      return Optional.<java.lang.String>ofNullable(componentInstance);
    }

    /**
      * Sets the value of the 'componentInstance' field.
      * @param value The value of 'componentInstance'.
      * @return This builder.
      */
    public com.skaria.avro.model.ErrorRecord.Builder setComponentInstance(java.lang.String value) {
      validate(fields()[4], value);
      this.componentInstance = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'componentInstance' field has been set.
      * @return True if the 'componentInstance' field has been set, false otherwise.
      */
    public boolean hasComponentInstance() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'componentInstance' field.
      * @return This builder.
      */
    public com.skaria.avro.model.ErrorRecord.Builder clearComponentInstance() {
      componentInstance = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'entityId' field.
      * @return The value.
      */
    public java.lang.String getEntityId() {
      return entityId;
    }

    /**
      * Gets the value of the 'entityId' field as an Optional&lt;java.lang.String&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
      */
    public Optional<java.lang.String> getOptionalEntityId() {
      return Optional.<java.lang.String>ofNullable(entityId);
    }

    /**
      * Sets the value of the 'entityId' field.
      * @param value The value of 'entityId'.
      * @return This builder.
      */
    public com.skaria.avro.model.ErrorRecord.Builder setEntityId(java.lang.String value) {
      validate(fields()[5], value);
      this.entityId = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'entityId' field has been set.
      * @return True if the 'entityId' field has been set, false otherwise.
      */
    public boolean hasEntityId() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'entityId' field.
      * @return This builder.
      */
    public com.skaria.avro.model.ErrorRecord.Builder clearEntityId() {
      entityId = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'entityType' field.
      * @return The value.
      */
    public java.lang.String getEntityType() {
      return entityType;
    }

    /**
      * Gets the value of the 'entityType' field as an Optional&lt;java.lang.String&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
      */
    public Optional<java.lang.String> getOptionalEntityType() {
      return Optional.<java.lang.String>ofNullable(entityType);
    }

    /**
      * Sets the value of the 'entityType' field.
      * @param value The value of 'entityType'.
      * @return This builder.
      */
    public com.skaria.avro.model.ErrorRecord.Builder setEntityType(java.lang.String value) {
      validate(fields()[6], value);
      this.entityType = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'entityType' field has been set.
      * @return True if the 'entityType' field has been set, false otherwise.
      */
    public boolean hasEntityType() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'entityType' field.
      * @return This builder.
      */
    public com.skaria.avro.model.ErrorRecord.Builder clearEntityType() {
      entityType = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'exceptionStackTrace' field.
      * @return The value.
      */
    public java.lang.String getExceptionStackTrace() {
      return exceptionStackTrace;
    }

    /**
      * Gets the value of the 'exceptionStackTrace' field as an Optional&lt;java.lang.String&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
      */
    public Optional<java.lang.String> getOptionalExceptionStackTrace() {
      return Optional.<java.lang.String>ofNullable(exceptionStackTrace);
    }

    /**
      * Sets the value of the 'exceptionStackTrace' field.
      * @param value The value of 'exceptionStackTrace'.
      * @return This builder.
      */
    public com.skaria.avro.model.ErrorRecord.Builder setExceptionStackTrace(java.lang.String value) {
      validate(fields()[7], value);
      this.exceptionStackTrace = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'exceptionStackTrace' field has been set.
      * @return True if the 'exceptionStackTrace' field has been set, false otherwise.
      */
    public boolean hasExceptionStackTrace() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'exceptionStackTrace' field.
      * @return This builder.
      */
    public com.skaria.avro.model.ErrorRecord.Builder clearExceptionStackTrace() {
      exceptionStackTrace = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'payload' field.
      * @return The value.
      */
    public java.lang.String getPayload() {
      return payload;
    }

    /**
      * Gets the value of the 'payload' field as an Optional&lt;java.lang.String&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
      */
    public Optional<java.lang.String> getOptionalPayload() {
      return Optional.<java.lang.String>ofNullable(payload);
    }

    /**
      * Sets the value of the 'payload' field.
      * @param value The value of 'payload'.
      * @return This builder.
      */
    public com.skaria.avro.model.ErrorRecord.Builder setPayload(java.lang.String value) {
      validate(fields()[8], value);
      this.payload = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'payload' field has been set.
      * @return True if the 'payload' field has been set, false otherwise.
      */
    public boolean hasPayload() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'payload' field.
      * @return This builder.
      */
    public com.skaria.avro.model.ErrorRecord.Builder clearPayload() {
      payload = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'externalRefId' field.
      * @return The value.
      */
    public java.lang.String getExternalRefId() {
      return externalRefId;
    }

    /**
      * Gets the value of the 'externalRefId' field as an Optional&lt;java.lang.String&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
      */
    public Optional<java.lang.String> getOptionalExternalRefId() {
      return Optional.<java.lang.String>ofNullable(externalRefId);
    }

    /**
      * Sets the value of the 'externalRefId' field.
      * @param value The value of 'externalRefId'.
      * @return This builder.
      */
    public com.skaria.avro.model.ErrorRecord.Builder setExternalRefId(java.lang.String value) {
      validate(fields()[9], value);
      this.externalRefId = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'externalRefId' field has been set.
      * @return True if the 'externalRefId' field has been set, false otherwise.
      */
    public boolean hasExternalRefId() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'externalRefId' field.
      * @return This builder.
      */
    public com.skaria.avro.model.ErrorRecord.Builder clearExternalRefId() {
      externalRefId = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'invariantFailures' field.
      * @return The value.
      */
    public java.util.List<com.skaria.avro.model.aggregate.InvariantFailureRecord> getInvariantFailures() {
      return invariantFailures;
    }

    /**
      * Gets the value of the 'invariantFailures' field as an Optional&lt;java.util.List<com.skaria.avro.model.aggregate.InvariantFailureRecord>&gt;.
      * @return The value wrapped in an Optional&lt;java.util.List<com.skaria.avro.model.aggregate.InvariantFailureRecord>&gt;.
      */
    public Optional<java.util.List<com.skaria.avro.model.aggregate.InvariantFailureRecord>> getOptionalInvariantFailures() {
      return Optional.<java.util.List<com.skaria.avro.model.aggregate.InvariantFailureRecord>>ofNullable(invariantFailures);
    }

    /**
      * Sets the value of the 'invariantFailures' field.
      * @param value The value of 'invariantFailures'.
      * @return This builder.
      */
    public com.skaria.avro.model.ErrorRecord.Builder setInvariantFailures(java.util.List<com.skaria.avro.model.aggregate.InvariantFailureRecord> value) {
      validate(fields()[10], value);
      this.invariantFailures = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'invariantFailures' field has been set.
      * @return True if the 'invariantFailures' field has been set, false otherwise.
      */
    public boolean hasInvariantFailures() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'invariantFailures' field.
      * @return This builder.
      */
    public com.skaria.avro.model.ErrorRecord.Builder clearInvariantFailures() {
      invariantFailures = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ErrorRecord build() {
      try {
        ErrorRecord record = new ErrorRecord();
        record.correlationId = fieldSetFlags()[0] ? this.correlationId : (java.lang.String) defaultValue(fields()[0]);
        record.timestamp = fieldSetFlags()[1] ? this.timestamp : (java.lang.String) defaultValue(fields()[1]);
        record.message = fieldSetFlags()[2] ? this.message : (java.lang.String) defaultValue(fields()[2]);
        record.componentType = fieldSetFlags()[3] ? this.componentType : (java.lang.String) defaultValue(fields()[3]);
        record.componentInstance = fieldSetFlags()[4] ? this.componentInstance : (java.lang.String) defaultValue(fields()[4]);
        record.entityId = fieldSetFlags()[5] ? this.entityId : (java.lang.String) defaultValue(fields()[5]);
        record.entityType = fieldSetFlags()[6] ? this.entityType : (java.lang.String) defaultValue(fields()[6]);
        record.exceptionStackTrace = fieldSetFlags()[7] ? this.exceptionStackTrace : (java.lang.String) defaultValue(fields()[7]);
        record.payload = fieldSetFlags()[8] ? this.payload : (java.lang.String) defaultValue(fields()[8]);
        record.externalRefId = fieldSetFlags()[9] ? this.externalRefId : (java.lang.String) defaultValue(fields()[9]);
        record.invariantFailures = fieldSetFlags()[10] ? this.invariantFailures : (java.util.List<com.skaria.avro.model.aggregate.InvariantFailureRecord>) defaultValue(fields()[10]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ErrorRecord>
    WRITER$ = (org.apache.avro.io.DatumWriter<ErrorRecord>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ErrorRecord>
    READER$ = (org.apache.avro.io.DatumReader<ErrorRecord>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.correlationId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.correlationId);
    }

    if (this.timestamp == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.timestamp);
    }

    if (this.message == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.message);
    }

    if (this.componentType == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.componentType);
    }

    if (this.componentInstance == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.componentInstance);
    }

    if (this.entityId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.entityId);
    }

    if (this.entityType == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.entityType);
    }

    if (this.exceptionStackTrace == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.exceptionStackTrace);
    }

    if (this.payload == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.payload);
    }

    if (this.externalRefId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.externalRefId);
    }

    if (this.invariantFailures == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size0 = this.invariantFailures.size();
      out.writeArrayStart();
      out.setItemCount(size0);
      long actualSize0 = 0;
      for (com.skaria.avro.model.aggregate.InvariantFailureRecord e0: this.invariantFailures) {
        actualSize0++;
        out.startItem();
        e0.customEncode(out);
      }
      out.writeArrayEnd();
      if (actualSize0 != size0)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.correlationId = null;
      } else {
        this.correlationId = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.timestamp = null;
      } else {
        this.timestamp = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.message = null;
      } else {
        this.message = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.componentType = null;
      } else {
        this.componentType = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.componentInstance = null;
      } else {
        this.componentInstance = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.entityId = null;
      } else {
        this.entityId = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.entityType = null;
      } else {
        this.entityType = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.exceptionStackTrace = null;
      } else {
        this.exceptionStackTrace = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.payload = null;
      } else {
        this.payload = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.externalRefId = null;
      } else {
        this.externalRefId = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.invariantFailures = null;
      } else {
        long size0 = in.readArrayStart();
        java.util.List<com.skaria.avro.model.aggregate.InvariantFailureRecord> a0 = this.invariantFailures;
        if (a0 == null) {
          a0 = new SpecificData.Array<com.skaria.avro.model.aggregate.InvariantFailureRecord>((int)size0, SCHEMA$.getField("invariantFailures").schema().getTypes().get(1));
          this.invariantFailures = a0;
        } else a0.clear();
        SpecificData.Array<com.skaria.avro.model.aggregate.InvariantFailureRecord> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<com.skaria.avro.model.aggregate.InvariantFailureRecord>)a0 : null);
        for ( ; 0 < size0; size0 = in.arrayNext()) {
          for ( ; size0 != 0; size0--) {
            com.skaria.avro.model.aggregate.InvariantFailureRecord e0 = (ga0 != null ? ga0.peek() : null);
            if (e0 == null) {
              e0 = new com.skaria.avro.model.aggregate.InvariantFailureRecord();
            }
            e0.customDecode(in);
            a0.add(e0);
          }
        }
      }

    } else {
      for (int i = 0; i < 11; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.correlationId = null;
          } else {
            this.correlationId = in.readString();
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.timestamp = null;
          } else {
            this.timestamp = in.readString();
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.message = null;
          } else {
            this.message = in.readString();
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.componentType = null;
          } else {
            this.componentType = in.readString();
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.componentInstance = null;
          } else {
            this.componentInstance = in.readString();
          }
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.entityId = null;
          } else {
            this.entityId = in.readString();
          }
          break;

        case 6:
          if (in.readIndex() != 1) {
            in.readNull();
            this.entityType = null;
          } else {
            this.entityType = in.readString();
          }
          break;

        case 7:
          if (in.readIndex() != 1) {
            in.readNull();
            this.exceptionStackTrace = null;
          } else {
            this.exceptionStackTrace = in.readString();
          }
          break;

        case 8:
          if (in.readIndex() != 1) {
            in.readNull();
            this.payload = null;
          } else {
            this.payload = in.readString();
          }
          break;

        case 9:
          if (in.readIndex() != 1) {
            in.readNull();
            this.externalRefId = null;
          } else {
            this.externalRefId = in.readString();
          }
          break;

        case 10:
          if (in.readIndex() != 1) {
            in.readNull();
            this.invariantFailures = null;
          } else {
            long size0 = in.readArrayStart();
            java.util.List<com.skaria.avro.model.aggregate.InvariantFailureRecord> a0 = this.invariantFailures;
            if (a0 == null) {
              a0 = new SpecificData.Array<com.skaria.avro.model.aggregate.InvariantFailureRecord>((int)size0, SCHEMA$.getField("invariantFailures").schema().getTypes().get(1));
              this.invariantFailures = a0;
            } else a0.clear();
            SpecificData.Array<com.skaria.avro.model.aggregate.InvariantFailureRecord> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<com.skaria.avro.model.aggregate.InvariantFailureRecord>)a0 : null);
            for ( ; 0 < size0; size0 = in.arrayNext()) {
              for ( ; size0 != 0; size0--) {
                com.skaria.avro.model.aggregate.InvariantFailureRecord e0 = (ga0 != null ? ga0.peek() : null);
                if (e0 == null) {
                  e0 = new com.skaria.avro.model.aggregate.InvariantFailureRecord();
                }
                e0.customDecode(in);
                a0.add(e0);
              }
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










