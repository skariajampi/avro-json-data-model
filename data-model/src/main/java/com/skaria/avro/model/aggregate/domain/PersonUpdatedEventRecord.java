/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.skaria.avro.model.aggregate.domain;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;
import java.util.Optional;
@org.apache.avro.specific.AvroGenerated
public class PersonUpdatedEventRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 2351313803713927834L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PersonUpdatedEventRecord\",\"namespace\":\"com.skaria.avro.model.aggregate.domain\",\"fields\":[{\"name\":\"eventId\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"creationTimestamp\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"personBefore\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Person\",\"namespace\":\"com.skaria.avro.model\",\"fields\":[{\"name\":\"person\",\"type\":\"Person\"}]}],\"default\":null},{\"name\":\"personAfter\",\"type\":\"com.skaria.avro.model.Person\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.UUIDConversion());
  }

  private static final BinaryMessageEncoder<PersonUpdatedEventRecord> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<PersonUpdatedEventRecord> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<PersonUpdatedEventRecord> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<PersonUpdatedEventRecord> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<PersonUpdatedEventRecord> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this PersonUpdatedEventRecord to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a PersonUpdatedEventRecord from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a PersonUpdatedEventRecord instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static PersonUpdatedEventRecord fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.util.UUID eventId;
  private java.lang.String creationTimestamp;
  private com.skaria.avro.model.Person personBefore;
  private com.skaria.avro.model.Person personAfter;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public PersonUpdatedEventRecord() {}

  /**
   * All-args constructor.
   * @param eventId The new value for eventId
   * @param creationTimestamp The new value for creationTimestamp
   * @param personBefore The new value for personBefore
   * @param personAfter The new value for personAfter
   */
  public PersonUpdatedEventRecord(java.util.UUID eventId, java.lang.String creationTimestamp, com.skaria.avro.model.Person personBefore, com.skaria.avro.model.Person personAfter) {
    this.eventId = eventId;
    this.creationTimestamp = creationTimestamp;
    this.personBefore = personBefore;
    this.personAfter = personAfter;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return eventId;
    case 1: return creationTimestamp;
    case 2: return personBefore;
    case 3: return personAfter;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      new org.apache.avro.Conversions.UUIDConversion(),
      null,
      null,
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: eventId = (java.util.UUID)value$; break;
    case 1: creationTimestamp = value$ != null ? value$.toString() : null; break;
    case 2: personBefore = (com.skaria.avro.model.Person)value$; break;
    case 3: personAfter = (com.skaria.avro.model.Person)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'eventId' field.
   * @return The value of the 'eventId' field.
   */
  public java.util.UUID getEventId() {
    return eventId;
  }

  /**
   * Gets the value of the 'eventId' field as an Optional&lt;java.util.UUID&gt;.
   * @return The value wrapped in an Optional&lt;java.util.UUID&gt;.
   */
  public Optional<java.util.UUID> getOptionalEventId() {
    return Optional.<java.util.UUID>ofNullable(eventId);
  }

  /**
   * Sets the value of the 'eventId' field.
   * @param value the value to set.
   */
  public void setEventId(java.util.UUID value) {
    this.eventId = value;
  }

  /**
   * Gets the value of the 'creationTimestamp' field.
   * @return The value of the 'creationTimestamp' field.
   */
  public java.lang.String getCreationTimestamp() {
    return creationTimestamp;
  }

  /**
   * Gets the value of the 'creationTimestamp' field as an Optional&lt;java.lang.String&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
   */
  public Optional<java.lang.String> getOptionalCreationTimestamp() {
    return Optional.<java.lang.String>ofNullable(creationTimestamp);
  }

  /**
   * Sets the value of the 'creationTimestamp' field.
   * @param value the value to set.
   */
  public void setCreationTimestamp(java.lang.String value) {
    this.creationTimestamp = value;
  }

  /**
   * Gets the value of the 'personBefore' field.
   * @return The value of the 'personBefore' field.
   */
  public com.skaria.avro.model.Person getPersonBefore() {
    return personBefore;
  }

  /**
   * Gets the value of the 'personBefore' field as an Optional&lt;com.skaria.avro.model.Person&gt;.
   * @return The value wrapped in an Optional&lt;com.skaria.avro.model.Person&gt;.
   */
  public Optional<com.skaria.avro.model.Person> getOptionalPersonBefore() {
    return Optional.<com.skaria.avro.model.Person>ofNullable(personBefore);
  }

  /**
   * Sets the value of the 'personBefore' field.
   * @param value the value to set.
   */
  public void setPersonBefore(com.skaria.avro.model.Person value) {
    this.personBefore = value;
  }

  /**
   * Gets the value of the 'personAfter' field.
   * @return The value of the 'personAfter' field.
   */
  public com.skaria.avro.model.Person getPersonAfter() {
    return personAfter;
  }

  /**
   * Gets the value of the 'personAfter' field as an Optional&lt;com.skaria.avro.model.Person&gt;.
   * @return The value wrapped in an Optional&lt;com.skaria.avro.model.Person&gt;.
   */
  public Optional<com.skaria.avro.model.Person> getOptionalPersonAfter() {
    return Optional.<com.skaria.avro.model.Person>ofNullable(personAfter);
  }

  /**
   * Sets the value of the 'personAfter' field.
   * @param value the value to set.
   */
  public void setPersonAfter(com.skaria.avro.model.Person value) {
    this.personAfter = value;
  }

  /**
   * Creates a new PersonUpdatedEventRecord RecordBuilder.
   * @return A new PersonUpdatedEventRecord RecordBuilder
   */
  public static com.skaria.avro.model.aggregate.domain.PersonUpdatedEventRecord.Builder newBuilder() {
    return new com.skaria.avro.model.aggregate.domain.PersonUpdatedEventRecord.Builder();
  }

  /**
   * Creates a new PersonUpdatedEventRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new PersonUpdatedEventRecord RecordBuilder
   */
  public static com.skaria.avro.model.aggregate.domain.PersonUpdatedEventRecord.Builder newBuilder(com.skaria.avro.model.aggregate.domain.PersonUpdatedEventRecord.Builder other) {
    if (other == null) {
      return new com.skaria.avro.model.aggregate.domain.PersonUpdatedEventRecord.Builder();
    } else {
      return new com.skaria.avro.model.aggregate.domain.PersonUpdatedEventRecord.Builder(other);
    }
  }

  /**
   * Creates a new PersonUpdatedEventRecord RecordBuilder by copying an existing PersonUpdatedEventRecord instance.
   * @param other The existing instance to copy.
   * @return A new PersonUpdatedEventRecord RecordBuilder
   */
  public static com.skaria.avro.model.aggregate.domain.PersonUpdatedEventRecord.Builder newBuilder(com.skaria.avro.model.aggregate.domain.PersonUpdatedEventRecord other) {
    if (other == null) {
      return new com.skaria.avro.model.aggregate.domain.PersonUpdatedEventRecord.Builder();
    } else {
      return new com.skaria.avro.model.aggregate.domain.PersonUpdatedEventRecord.Builder(other);
    }
  }

  /**
   * RecordBuilder for PersonUpdatedEventRecord instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PersonUpdatedEventRecord>
    implements org.apache.avro.data.RecordBuilder<PersonUpdatedEventRecord> {

    private java.util.UUID eventId;
    private java.lang.String creationTimestamp;
    private com.skaria.avro.model.Person personBefore;
    private com.skaria.avro.model.Person.Builder personBeforeBuilder;
    private com.skaria.avro.model.Person personAfter;
    private com.skaria.avro.model.Person.Builder personAfterBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.skaria.avro.model.aggregate.domain.PersonUpdatedEventRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.eventId)) {
        this.eventId = data().deepCopy(fields()[0].schema(), other.eventId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.creationTimestamp)) {
        this.creationTimestamp = data().deepCopy(fields()[1].schema(), other.creationTimestamp);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.personBefore)) {
        this.personBefore = data().deepCopy(fields()[2].schema(), other.personBefore);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (other.hasPersonBeforeBuilder()) {
        this.personBeforeBuilder = com.skaria.avro.model.Person.newBuilder(other.getPersonBeforeBuilder());
      }
      if (isValidValue(fields()[3], other.personAfter)) {
        this.personAfter = data().deepCopy(fields()[3].schema(), other.personAfter);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (other.hasPersonAfterBuilder()) {
        this.personAfterBuilder = com.skaria.avro.model.Person.newBuilder(other.getPersonAfterBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing PersonUpdatedEventRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(com.skaria.avro.model.aggregate.domain.PersonUpdatedEventRecord other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.eventId)) {
        this.eventId = data().deepCopy(fields()[0].schema(), other.eventId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.creationTimestamp)) {
        this.creationTimestamp = data().deepCopy(fields()[1].schema(), other.creationTimestamp);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.personBefore)) {
        this.personBefore = data().deepCopy(fields()[2].schema(), other.personBefore);
        fieldSetFlags()[2] = true;
      }
      this.personBeforeBuilder = null;
      if (isValidValue(fields()[3], other.personAfter)) {
        this.personAfter = data().deepCopy(fields()[3].schema(), other.personAfter);
        fieldSetFlags()[3] = true;
      }
      this.personAfterBuilder = null;
    }

    /**
      * Gets the value of the 'eventId' field.
      * @return The value.
      */
    public java.util.UUID getEventId() {
      return eventId;
    }

    /**
      * Gets the value of the 'eventId' field as an Optional&lt;java.util.UUID&gt;.
      * @return The value wrapped in an Optional&lt;java.util.UUID&gt;.
      */
    public Optional<java.util.UUID> getOptionalEventId() {
      return Optional.<java.util.UUID>ofNullable(eventId);
    }

    /**
      * Sets the value of the 'eventId' field.
      * @param value The value of 'eventId'.
      * @return This builder.
      */
    public com.skaria.avro.model.aggregate.domain.PersonUpdatedEventRecord.Builder setEventId(java.util.UUID value) {
      validate(fields()[0], value);
      this.eventId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'eventId' field has been set.
      * @return True if the 'eventId' field has been set, false otherwise.
      */
    public boolean hasEventId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'eventId' field.
      * @return This builder.
      */
    public com.skaria.avro.model.aggregate.domain.PersonUpdatedEventRecord.Builder clearEventId() {
      eventId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'creationTimestamp' field.
      * @return The value.
      */
    public java.lang.String getCreationTimestamp() {
      return creationTimestamp;
    }

    /**
      * Gets the value of the 'creationTimestamp' field as an Optional&lt;java.lang.String&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
      */
    public Optional<java.lang.String> getOptionalCreationTimestamp() {
      return Optional.<java.lang.String>ofNullable(creationTimestamp);
    }

    /**
      * Sets the value of the 'creationTimestamp' field.
      * @param value The value of 'creationTimestamp'.
      * @return This builder.
      */
    public com.skaria.avro.model.aggregate.domain.PersonUpdatedEventRecord.Builder setCreationTimestamp(java.lang.String value) {
      validate(fields()[1], value);
      this.creationTimestamp = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'creationTimestamp' field has been set.
      * @return True if the 'creationTimestamp' field has been set, false otherwise.
      */
    public boolean hasCreationTimestamp() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'creationTimestamp' field.
      * @return This builder.
      */
    public com.skaria.avro.model.aggregate.domain.PersonUpdatedEventRecord.Builder clearCreationTimestamp() {
      creationTimestamp = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'personBefore' field.
      * @return The value.
      */
    public com.skaria.avro.model.Person getPersonBefore() {
      return personBefore;
    }

    /**
      * Gets the value of the 'personBefore' field as an Optional&lt;com.skaria.avro.model.Person&gt;.
      * @return The value wrapped in an Optional&lt;com.skaria.avro.model.Person&gt;.
      */
    public Optional<com.skaria.avro.model.Person> getOptionalPersonBefore() {
      return Optional.<com.skaria.avro.model.Person>ofNullable(personBefore);
    }

    /**
      * Sets the value of the 'personBefore' field.
      * @param value The value of 'personBefore'.
      * @return This builder.
      */
    public com.skaria.avro.model.aggregate.domain.PersonUpdatedEventRecord.Builder setPersonBefore(com.skaria.avro.model.Person value) {
      validate(fields()[2], value);
      this.personBeforeBuilder = null;
      this.personBefore = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'personBefore' field has been set.
      * @return True if the 'personBefore' field has been set, false otherwise.
      */
    public boolean hasPersonBefore() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'personBefore' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.skaria.avro.model.Person.Builder getPersonBeforeBuilder() {
      if (personBeforeBuilder == null) {
        if (hasPersonBefore()) {
          setPersonBeforeBuilder(com.skaria.avro.model.Person.newBuilder(personBefore));
        } else {
          setPersonBeforeBuilder(com.skaria.avro.model.Person.newBuilder());
        }
      }
      return personBeforeBuilder;
    }

    /**
     * Sets the Builder instance for the 'personBefore' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.skaria.avro.model.aggregate.domain.PersonUpdatedEventRecord.Builder setPersonBeforeBuilder(com.skaria.avro.model.Person.Builder value) {
      clearPersonBefore();
      personBeforeBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'personBefore' field has an active Builder instance
     * @return True if the 'personBefore' field has an active Builder instance
     */
    public boolean hasPersonBeforeBuilder() {
      return personBeforeBuilder != null;
    }

    /**
      * Clears the value of the 'personBefore' field.
      * @return This builder.
      */
    public com.skaria.avro.model.aggregate.domain.PersonUpdatedEventRecord.Builder clearPersonBefore() {
      personBefore = null;
      personBeforeBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'personAfter' field.
      * @return The value.
      */
    public com.skaria.avro.model.Person getPersonAfter() {
      return personAfter;
    }

    /**
      * Gets the value of the 'personAfter' field as an Optional&lt;com.skaria.avro.model.Person&gt;.
      * @return The value wrapped in an Optional&lt;com.skaria.avro.model.Person&gt;.
      */
    public Optional<com.skaria.avro.model.Person> getOptionalPersonAfter() {
      return Optional.<com.skaria.avro.model.Person>ofNullable(personAfter);
    }

    /**
      * Sets the value of the 'personAfter' field.
      * @param value The value of 'personAfter'.
      * @return This builder.
      */
    public com.skaria.avro.model.aggregate.domain.PersonUpdatedEventRecord.Builder setPersonAfter(com.skaria.avro.model.Person value) {
      validate(fields()[3], value);
      this.personAfterBuilder = null;
      this.personAfter = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'personAfter' field has been set.
      * @return True if the 'personAfter' field has been set, false otherwise.
      */
    public boolean hasPersonAfter() {
      return fieldSetFlags()[3];
    }

    /**
     * Gets the Builder instance for the 'personAfter' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.skaria.avro.model.Person.Builder getPersonAfterBuilder() {
      if (personAfterBuilder == null) {
        if (hasPersonAfter()) {
          setPersonAfterBuilder(com.skaria.avro.model.Person.newBuilder(personAfter));
        } else {
          setPersonAfterBuilder(com.skaria.avro.model.Person.newBuilder());
        }
      }
      return personAfterBuilder;
    }

    /**
     * Sets the Builder instance for the 'personAfter' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.skaria.avro.model.aggregate.domain.PersonUpdatedEventRecord.Builder setPersonAfterBuilder(com.skaria.avro.model.Person.Builder value) {
      clearPersonAfter();
      personAfterBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'personAfter' field has an active Builder instance
     * @return True if the 'personAfter' field has an active Builder instance
     */
    public boolean hasPersonAfterBuilder() {
      return personAfterBuilder != null;
    }

    /**
      * Clears the value of the 'personAfter' field.
      * @return This builder.
      */
    public com.skaria.avro.model.aggregate.domain.PersonUpdatedEventRecord.Builder clearPersonAfter() {
      personAfter = null;
      personAfterBuilder = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public PersonUpdatedEventRecord build() {
      try {
        PersonUpdatedEventRecord record = new PersonUpdatedEventRecord();
        record.eventId = fieldSetFlags()[0] ? this.eventId : (java.util.UUID) defaultValue(fields()[0]);
        record.creationTimestamp = fieldSetFlags()[1] ? this.creationTimestamp : (java.lang.String) defaultValue(fields()[1]);
        if (personBeforeBuilder != null) {
          try {
            record.personBefore = this.personBeforeBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("personBefore"));
            throw e;
          }
        } else {
          record.personBefore = fieldSetFlags()[2] ? this.personBefore : (com.skaria.avro.model.Person) defaultValue(fields()[2]);
        }
        if (personAfterBuilder != null) {
          try {
            record.personAfter = this.personAfterBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("personAfter"));
            throw e;
          }
        } else {
          record.personAfter = fieldSetFlags()[3] ? this.personAfter : (com.skaria.avro.model.Person) defaultValue(fields()[3]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<PersonUpdatedEventRecord>
    WRITER$ = (org.apache.avro.io.DatumWriter<PersonUpdatedEventRecord>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<PersonUpdatedEventRecord>
    READER$ = (org.apache.avro.io.DatumReader<PersonUpdatedEventRecord>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










