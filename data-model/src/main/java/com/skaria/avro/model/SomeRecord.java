/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.skaria.avro.model;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;
import java.util.Optional;
@org.apache.avro.specific.AvroGenerated
public class SomeRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 5628696943588425017L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SomeRecord\",\"namespace\":\"com.skaria.avro.model\",\"fields\":[{\"name\":\"identifier\",\"type\":{\"type\":\"record\",\"name\":\"Identifier\",\"fields\":[{\"name\":\"identifier\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}},{\"name\":\"Id\",\"type\":{\"type\":\"record\",\"name\":\"Id\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}},{\"name\":\"TIMESTAMP\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"MEASURE\",\"type\":[\"null\",\"int\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<SomeRecord> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<SomeRecord> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<SomeRecord> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<SomeRecord> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<SomeRecord> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this SomeRecord to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a SomeRecord from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a SomeRecord instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static SomeRecord fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private com.skaria.avro.model.Identifier identifier;
  private com.skaria.avro.model.Id Id;
  private java.lang.String TIMESTAMP;
  private java.lang.Integer MEASURE;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public SomeRecord() {}

  /**
   * All-args constructor.
   * @param identifier The new value for identifier
   * @param Id The new value for Id
   * @param TIMESTAMP The new value for TIMESTAMP
   * @param MEASURE The new value for MEASURE
   */
  public SomeRecord(com.skaria.avro.model.Identifier identifier, com.skaria.avro.model.Id Id, java.lang.String TIMESTAMP, java.lang.Integer MEASURE) {
    this.identifier = identifier;
    this.Id = Id;
    this.TIMESTAMP = TIMESTAMP;
    this.MEASURE = MEASURE;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return identifier;
    case 1: return Id;
    case 2: return TIMESTAMP;
    case 3: return MEASURE;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: identifier = (com.skaria.avro.model.Identifier)value$; break;
    case 1: Id = (com.skaria.avro.model.Id)value$; break;
    case 2: TIMESTAMP = value$ != null ? value$.toString() : null; break;
    case 3: MEASURE = (java.lang.Integer)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'identifier' field.
   * @return The value of the 'identifier' field.
   */
  public com.skaria.avro.model.Identifier getIdentifier() {
    return identifier;
  }

  /**
   * Gets the value of the 'identifier' field as an Optional&lt;com.skaria.avro.model.Identifier&gt;.
   * @return The value wrapped in an Optional&lt;com.skaria.avro.model.Identifier&gt;.
   */
  public Optional<com.skaria.avro.model.Identifier> getOptionalIdentifier() {
    return Optional.<com.skaria.avro.model.Identifier>ofNullable(identifier);
  }

  /**
   * Sets the value of the 'identifier' field.
   * @param value the value to set.
   */
  public void setIdentifier(com.skaria.avro.model.Identifier value) {
    this.identifier = value;
  }

  /**
   * Gets the value of the 'Id' field.
   * @return The value of the 'Id' field.
   */
  public com.skaria.avro.model.Id getId() {
    return Id;
  }

  /**
   * Gets the value of the 'Id' field as an Optional&lt;com.skaria.avro.model.Id&gt;.
   * @return The value wrapped in an Optional&lt;com.skaria.avro.model.Id&gt;.
   */
  public Optional<com.skaria.avro.model.Id> getOptionalId() {
    return Optional.<com.skaria.avro.model.Id>ofNullable(Id);
  }

  /**
   * Sets the value of the 'Id' field.
   * @param value the value to set.
   */
  public void setId(com.skaria.avro.model.Id value) {
    this.Id = value;
  }

  /**
   * Gets the value of the 'TIMESTAMP' field.
   * @return The value of the 'TIMESTAMP' field.
   */
  public java.lang.String getTIMESTAMP() {
    return TIMESTAMP;
  }

  /**
   * Gets the value of the 'TIMESTAMP' field as an Optional&lt;java.lang.String&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
   */
  public Optional<java.lang.String> getOptionalTIMESTAMP() {
    return Optional.<java.lang.String>ofNullable(TIMESTAMP);
  }

  /**
   * Sets the value of the 'TIMESTAMP' field.
   * @param value the value to set.
   */
  public void setTIMESTAMP(java.lang.String value) {
    this.TIMESTAMP = value;
  }

  /**
   * Gets the value of the 'MEASURE' field.
   * @return The value of the 'MEASURE' field.
   */
  public java.lang.Integer getMEASURE() {
    return MEASURE;
  }

  /**
   * Gets the value of the 'MEASURE' field as an Optional&lt;java.lang.Integer&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.Integer&gt;.
   */
  public Optional<java.lang.Integer> getOptionalMEASURE() {
    return Optional.<java.lang.Integer>ofNullable(MEASURE);
  }

  /**
   * Sets the value of the 'MEASURE' field.
   * @param value the value to set.
   */
  public void setMEASURE(java.lang.Integer value) {
    this.MEASURE = value;
  }

  /**
   * Creates a new SomeRecord RecordBuilder.
   * @return A new SomeRecord RecordBuilder
   */
  public static com.skaria.avro.model.SomeRecord.Builder newBuilder() {
    return new com.skaria.avro.model.SomeRecord.Builder();
  }

  /**
   * Creates a new SomeRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new SomeRecord RecordBuilder
   */
  public static com.skaria.avro.model.SomeRecord.Builder newBuilder(com.skaria.avro.model.SomeRecord.Builder other) {
    if (other == null) {
      return new com.skaria.avro.model.SomeRecord.Builder();
    } else {
      return new com.skaria.avro.model.SomeRecord.Builder(other);
    }
  }

  /**
   * Creates a new SomeRecord RecordBuilder by copying an existing SomeRecord instance.
   * @param other The existing instance to copy.
   * @return A new SomeRecord RecordBuilder
   */
  public static com.skaria.avro.model.SomeRecord.Builder newBuilder(com.skaria.avro.model.SomeRecord other) {
    if (other == null) {
      return new com.skaria.avro.model.SomeRecord.Builder();
    } else {
      return new com.skaria.avro.model.SomeRecord.Builder(other);
    }
  }

  /**
   * RecordBuilder for SomeRecord instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SomeRecord>
    implements org.apache.avro.data.RecordBuilder<SomeRecord> {

    private com.skaria.avro.model.Identifier identifier;
    private com.skaria.avro.model.Identifier.Builder identifierBuilder;
    private com.skaria.avro.model.Id Id;
    private com.skaria.avro.model.Id.Builder IdBuilder;
    private java.lang.String TIMESTAMP;
    private java.lang.Integer MEASURE;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.skaria.avro.model.SomeRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.identifier)) {
        this.identifier = data().deepCopy(fields()[0].schema(), other.identifier);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (other.hasIdentifierBuilder()) {
        this.identifierBuilder = com.skaria.avro.model.Identifier.newBuilder(other.getIdentifierBuilder());
      }
      if (isValidValue(fields()[1], other.Id)) {
        this.Id = data().deepCopy(fields()[1].schema(), other.Id);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (other.hasIdBuilder()) {
        this.IdBuilder = com.skaria.avro.model.Id.newBuilder(other.getIdBuilder());
      }
      if (isValidValue(fields()[2], other.TIMESTAMP)) {
        this.TIMESTAMP = data().deepCopy(fields()[2].schema(), other.TIMESTAMP);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.MEASURE)) {
        this.MEASURE = data().deepCopy(fields()[3].schema(), other.MEASURE);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing SomeRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(com.skaria.avro.model.SomeRecord other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.identifier)) {
        this.identifier = data().deepCopy(fields()[0].schema(), other.identifier);
        fieldSetFlags()[0] = true;
      }
      this.identifierBuilder = null;
      if (isValidValue(fields()[1], other.Id)) {
        this.Id = data().deepCopy(fields()[1].schema(), other.Id);
        fieldSetFlags()[1] = true;
      }
      this.IdBuilder = null;
      if (isValidValue(fields()[2], other.TIMESTAMP)) {
        this.TIMESTAMP = data().deepCopy(fields()[2].schema(), other.TIMESTAMP);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.MEASURE)) {
        this.MEASURE = data().deepCopy(fields()[3].schema(), other.MEASURE);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'identifier' field.
      * @return The value.
      */
    public com.skaria.avro.model.Identifier getIdentifier() {
      return identifier;
    }

    /**
      * Gets the value of the 'identifier' field as an Optional&lt;com.skaria.avro.model.Identifier&gt;.
      * @return The value wrapped in an Optional&lt;com.skaria.avro.model.Identifier&gt;.
      */
    public Optional<com.skaria.avro.model.Identifier> getOptionalIdentifier() {
      return Optional.<com.skaria.avro.model.Identifier>ofNullable(identifier);
    }

    /**
      * Sets the value of the 'identifier' field.
      * @param value The value of 'identifier'.
      * @return This builder.
      */
    public com.skaria.avro.model.SomeRecord.Builder setIdentifier(com.skaria.avro.model.Identifier value) {
      validate(fields()[0], value);
      this.identifierBuilder = null;
      this.identifier = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'identifier' field has been set.
      * @return True if the 'identifier' field has been set, false otherwise.
      */
    public boolean hasIdentifier() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'identifier' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.skaria.avro.model.Identifier.Builder getIdentifierBuilder() {
      if (identifierBuilder == null) {
        if (hasIdentifier()) {
          setIdentifierBuilder(com.skaria.avro.model.Identifier.newBuilder(identifier));
        } else {
          setIdentifierBuilder(com.skaria.avro.model.Identifier.newBuilder());
        }
      }
      return identifierBuilder;
    }

    /**
     * Sets the Builder instance for the 'identifier' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.skaria.avro.model.SomeRecord.Builder setIdentifierBuilder(com.skaria.avro.model.Identifier.Builder value) {
      clearIdentifier();
      identifierBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'identifier' field has an active Builder instance
     * @return True if the 'identifier' field has an active Builder instance
     */
    public boolean hasIdentifierBuilder() {
      return identifierBuilder != null;
    }

    /**
      * Clears the value of the 'identifier' field.
      * @return This builder.
      */
    public com.skaria.avro.model.SomeRecord.Builder clearIdentifier() {
      identifier = null;
      identifierBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'Id' field.
      * @return The value.
      */
    public com.skaria.avro.model.Id getId() {
      return Id;
    }

    /**
      * Gets the value of the 'Id' field as an Optional&lt;com.skaria.avro.model.Id&gt;.
      * @return The value wrapped in an Optional&lt;com.skaria.avro.model.Id&gt;.
      */
    public Optional<com.skaria.avro.model.Id> getOptionalId() {
      return Optional.<com.skaria.avro.model.Id>ofNullable(Id);
    }

    /**
      * Sets the value of the 'Id' field.
      * @param value The value of 'Id'.
      * @return This builder.
      */
    public com.skaria.avro.model.SomeRecord.Builder setId(com.skaria.avro.model.Id value) {
      validate(fields()[1], value);
      this.IdBuilder = null;
      this.Id = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'Id' field has been set.
      * @return True if the 'Id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'Id' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.skaria.avro.model.Id.Builder getIdBuilder() {
      if (IdBuilder == null) {
        if (hasId()) {
          setIdBuilder(com.skaria.avro.model.Id.newBuilder(Id));
        } else {
          setIdBuilder(com.skaria.avro.model.Id.newBuilder());
        }
      }
      return IdBuilder;
    }

    /**
     * Sets the Builder instance for the 'Id' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.skaria.avro.model.SomeRecord.Builder setIdBuilder(com.skaria.avro.model.Id.Builder value) {
      clearId();
      IdBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'Id' field has an active Builder instance
     * @return True if the 'Id' field has an active Builder instance
     */
    public boolean hasIdBuilder() {
      return IdBuilder != null;
    }

    /**
      * Clears the value of the 'Id' field.
      * @return This builder.
      */
    public com.skaria.avro.model.SomeRecord.Builder clearId() {
      Id = null;
      IdBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'TIMESTAMP' field.
      * @return The value.
      */
    public java.lang.String getTIMESTAMP() {
      return TIMESTAMP;
    }

    /**
      * Gets the value of the 'TIMESTAMP' field as an Optional&lt;java.lang.String&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
      */
    public Optional<java.lang.String> getOptionalTIMESTAMP() {
      return Optional.<java.lang.String>ofNullable(TIMESTAMP);
    }

    /**
      * Sets the value of the 'TIMESTAMP' field.
      * @param value The value of 'TIMESTAMP'.
      * @return This builder.
      */
    public com.skaria.avro.model.SomeRecord.Builder setTIMESTAMP(java.lang.String value) {
      validate(fields()[2], value);
      this.TIMESTAMP = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'TIMESTAMP' field has been set.
      * @return True if the 'TIMESTAMP' field has been set, false otherwise.
      */
    public boolean hasTIMESTAMP() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'TIMESTAMP' field.
      * @return This builder.
      */
    public com.skaria.avro.model.SomeRecord.Builder clearTIMESTAMP() {
      TIMESTAMP = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'MEASURE' field.
      * @return The value.
      */
    public java.lang.Integer getMEASURE() {
      return MEASURE;
    }

    /**
      * Gets the value of the 'MEASURE' field as an Optional&lt;java.lang.Integer&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.Integer&gt;.
      */
    public Optional<java.lang.Integer> getOptionalMEASURE() {
      return Optional.<java.lang.Integer>ofNullable(MEASURE);
    }

    /**
      * Sets the value of the 'MEASURE' field.
      * @param value The value of 'MEASURE'.
      * @return This builder.
      */
    public com.skaria.avro.model.SomeRecord.Builder setMEASURE(java.lang.Integer value) {
      validate(fields()[3], value);
      this.MEASURE = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'MEASURE' field has been set.
      * @return True if the 'MEASURE' field has been set, false otherwise.
      */
    public boolean hasMEASURE() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'MEASURE' field.
      * @return This builder.
      */
    public com.skaria.avro.model.SomeRecord.Builder clearMEASURE() {
      MEASURE = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public SomeRecord build() {
      try {
        SomeRecord record = new SomeRecord();
        if (identifierBuilder != null) {
          try {
            record.identifier = this.identifierBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("identifier"));
            throw e;
          }
        } else {
          record.identifier = fieldSetFlags()[0] ? this.identifier : (com.skaria.avro.model.Identifier) defaultValue(fields()[0]);
        }
        if (IdBuilder != null) {
          try {
            record.Id = this.IdBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("Id"));
            throw e;
          }
        } else {
          record.Id = fieldSetFlags()[1] ? this.Id : (com.skaria.avro.model.Id) defaultValue(fields()[1]);
        }
        record.TIMESTAMP = fieldSetFlags()[2] ? this.TIMESTAMP : (java.lang.String) defaultValue(fields()[2]);
        record.MEASURE = fieldSetFlags()[3] ? this.MEASURE : (java.lang.Integer) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<SomeRecord>
    WRITER$ = (org.apache.avro.io.DatumWriter<SomeRecord>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<SomeRecord>
    READER$ = (org.apache.avro.io.DatumReader<SomeRecord>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    this.identifier.customEncode(out);

    this.Id.customEncode(out);

    out.writeString(this.TIMESTAMP);

    if (this.MEASURE == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.MEASURE);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (this.identifier == null) {
        this.identifier = new com.skaria.avro.model.Identifier();
      }
      this.identifier.customDecode(in);

      if (this.Id == null) {
        this.Id = new com.skaria.avro.model.Id();
      }
      this.Id.customDecode(in);

      this.TIMESTAMP = in.readString();

      if (in.readIndex() != 1) {
        in.readNull();
        this.MEASURE = null;
      } else {
        this.MEASURE = in.readInt();
      }

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (this.identifier == null) {
            this.identifier = new com.skaria.avro.model.Identifier();
          }
          this.identifier.customDecode(in);
          break;

        case 1:
          if (this.Id == null) {
            this.Id = new com.skaria.avro.model.Id();
          }
          this.Id.customDecode(in);
          break;

        case 2:
          this.TIMESTAMP = in.readString();
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.MEASURE = null;
          } else {
            this.MEASURE = in.readInt();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










