/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.skaria.avro.model;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;
import java.util.Optional;
@org.apache.avro.specific.AvroGenerated
public class SomeRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3873753461888376309L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SomeRecord\",\"namespace\":\"com.skaria.avro.model\",\"fields\":[{\"name\":\"identifier\",\"type\":{\"type\":\"record\",\"name\":\"Identifier\",\"fields\":[{\"name\":\"identifier\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}},{\"name\":\"Id\",\"type\":{\"type\":\"record\",\"name\":\"Id\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}},{\"name\":\"TIMESTAMP\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"RECEIVEDDATE\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"PRODUCEDDATE\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"POSITION\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Location\",\"fields\":[{\"name\":\"latitude\",\"type\":\"double\"},{\"name\":\"longitude\",\"type\":\"double\"}]}]},{\"name\":\"MEASURE\",\"type\":[\"null\",\"int\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<SomeRecord> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<SomeRecord> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<SomeRecord> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<SomeRecord> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<SomeRecord> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this SomeRecord to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a SomeRecord from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a SomeRecord instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static SomeRecord fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private com.skaria.avro.model.Identifier identifier;
  private com.skaria.avro.model.Id Id;
  private java.time.Instant TIMESTAMP;
  private java.time.Instant RECEIVEDDATE;
  private java.time.Instant PRODUCEDDATE;
  private com.skaria.avro.model.Location POSITION;
  private java.lang.Integer MEASURE;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public SomeRecord() {}

  /**
   * All-args constructor.
   * @param identifier The new value for identifier
   * @param Id The new value for Id
   * @param TIMESTAMP The new value for TIMESTAMP
   * @param RECEIVEDDATE The new value for RECEIVEDDATE
   * @param PRODUCEDDATE The new value for PRODUCEDDATE
   * @param POSITION The new value for POSITION
   * @param MEASURE The new value for MEASURE
   */
  public SomeRecord(com.skaria.avro.model.Identifier identifier, com.skaria.avro.model.Id Id, java.time.Instant TIMESTAMP, java.time.Instant RECEIVEDDATE, java.time.Instant PRODUCEDDATE, com.skaria.avro.model.Location POSITION, java.lang.Integer MEASURE) {
    this.identifier = identifier;
    this.Id = Id;
    this.TIMESTAMP = TIMESTAMP.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    this.RECEIVEDDATE = RECEIVEDDATE.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    this.PRODUCEDDATE = PRODUCEDDATE.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    this.POSITION = POSITION;
    this.MEASURE = MEASURE;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return identifier;
    case 1: return Id;
    case 2: return TIMESTAMP;
    case 3: return RECEIVEDDATE;
    case 4: return PRODUCEDDATE;
    case 5: return POSITION;
    case 6: return MEASURE;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      null,
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: identifier = (com.skaria.avro.model.Identifier)value$; break;
    case 1: Id = (com.skaria.avro.model.Id)value$; break;
    case 2: TIMESTAMP = (java.time.Instant)value$; break;
    case 3: RECEIVEDDATE = (java.time.Instant)value$; break;
    case 4: PRODUCEDDATE = (java.time.Instant)value$; break;
    case 5: POSITION = (com.skaria.avro.model.Location)value$; break;
    case 6: MEASURE = (java.lang.Integer)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'identifier' field.
   * @return The value of the 'identifier' field.
   */
  public com.skaria.avro.model.Identifier getIdentifier() {
    return identifier;
  }

  /**
   * Gets the value of the 'identifier' field as an Optional&lt;com.skaria.avro.model.Identifier&gt;.
   * @return The value wrapped in an Optional&lt;com.skaria.avro.model.Identifier&gt;.
   */
  public Optional<com.skaria.avro.model.Identifier> getOptionalIdentifier() {
    return Optional.<com.skaria.avro.model.Identifier>ofNullable(identifier);
  }

  /**
   * Sets the value of the 'identifier' field.
   * @param value the value to set.
   */
  public void setIdentifier(com.skaria.avro.model.Identifier value) {
    this.identifier = value;
  }

  /**
   * Gets the value of the 'Id' field.
   * @return The value of the 'Id' field.
   */
  public com.skaria.avro.model.Id getId() {
    return Id;
  }

  /**
   * Gets the value of the 'Id' field as an Optional&lt;com.skaria.avro.model.Id&gt;.
   * @return The value wrapped in an Optional&lt;com.skaria.avro.model.Id&gt;.
   */
  public Optional<com.skaria.avro.model.Id> getOptionalId() {
    return Optional.<com.skaria.avro.model.Id>ofNullable(Id);
  }

  /**
   * Sets the value of the 'Id' field.
   * @param value the value to set.
   */
  public void setId(com.skaria.avro.model.Id value) {
    this.Id = value;
  }

  /**
   * Gets the value of the 'TIMESTAMP' field.
   * @return The value of the 'TIMESTAMP' field.
   */
  public java.time.Instant getTIMESTAMP() {
    return TIMESTAMP;
  }

  /**
   * Gets the value of the 'TIMESTAMP' field as an Optional&lt;java.time.Instant&gt;.
   * @return The value wrapped in an Optional&lt;java.time.Instant&gt;.
   */
  public Optional<java.time.Instant> getOptionalTIMESTAMP() {
    return Optional.<java.time.Instant>ofNullable(TIMESTAMP);
  }

  /**
   * Sets the value of the 'TIMESTAMP' field.
   * @param value the value to set.
   */
  public void setTIMESTAMP(java.time.Instant value) {
    this.TIMESTAMP = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Gets the value of the 'RECEIVEDDATE' field.
   * @return The value of the 'RECEIVEDDATE' field.
   */
  public java.time.Instant getRECEIVEDDATE() {
    return RECEIVEDDATE;
  }

  /**
   * Gets the value of the 'RECEIVEDDATE' field as an Optional&lt;java.time.Instant&gt;.
   * @return The value wrapped in an Optional&lt;java.time.Instant&gt;.
   */
  public Optional<java.time.Instant> getOptionalRECEIVEDDATE() {
    return Optional.<java.time.Instant>ofNullable(RECEIVEDDATE);
  }

  /**
   * Sets the value of the 'RECEIVEDDATE' field.
   * @param value the value to set.
   */
  public void setRECEIVEDDATE(java.time.Instant value) {
    this.RECEIVEDDATE = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Gets the value of the 'PRODUCEDDATE' field.
   * @return The value of the 'PRODUCEDDATE' field.
   */
  public java.time.Instant getPRODUCEDDATE() {
    return PRODUCEDDATE;
  }

  /**
   * Gets the value of the 'PRODUCEDDATE' field as an Optional&lt;java.time.Instant&gt;.
   * @return The value wrapped in an Optional&lt;java.time.Instant&gt;.
   */
  public Optional<java.time.Instant> getOptionalPRODUCEDDATE() {
    return Optional.<java.time.Instant>ofNullable(PRODUCEDDATE);
  }

  /**
   * Sets the value of the 'PRODUCEDDATE' field.
   * @param value the value to set.
   */
  public void setPRODUCEDDATE(java.time.Instant value) {
    this.PRODUCEDDATE = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Gets the value of the 'POSITION' field.
   * @return The value of the 'POSITION' field.
   */
  public com.skaria.avro.model.Location getPOSITION() {
    return POSITION;
  }

  /**
   * Gets the value of the 'POSITION' field as an Optional&lt;com.skaria.avro.model.Location&gt;.
   * @return The value wrapped in an Optional&lt;com.skaria.avro.model.Location&gt;.
   */
  public Optional<com.skaria.avro.model.Location> getOptionalPOSITION() {
    return Optional.<com.skaria.avro.model.Location>ofNullable(POSITION);
  }

  /**
   * Sets the value of the 'POSITION' field.
   * @param value the value to set.
   */
  public void setPOSITION(com.skaria.avro.model.Location value) {
    this.POSITION = value;
  }

  /**
   * Gets the value of the 'MEASURE' field.
   * @return The value of the 'MEASURE' field.
   */
  public java.lang.Integer getMEASURE() {
    return MEASURE;
  }

  /**
   * Gets the value of the 'MEASURE' field as an Optional&lt;java.lang.Integer&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.Integer&gt;.
   */
  public Optional<java.lang.Integer> getOptionalMEASURE() {
    return Optional.<java.lang.Integer>ofNullable(MEASURE);
  }

  /**
   * Sets the value of the 'MEASURE' field.
   * @param value the value to set.
   */
  public void setMEASURE(java.lang.Integer value) {
    this.MEASURE = value;
  }

  /**
   * Creates a new SomeRecord RecordBuilder.
   * @return A new SomeRecord RecordBuilder
   */
  public static com.skaria.avro.model.SomeRecord.Builder newBuilder() {
    return new com.skaria.avro.model.SomeRecord.Builder();
  }

  /**
   * Creates a new SomeRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new SomeRecord RecordBuilder
   */
  public static com.skaria.avro.model.SomeRecord.Builder newBuilder(com.skaria.avro.model.SomeRecord.Builder other) {
    if (other == null) {
      return new com.skaria.avro.model.SomeRecord.Builder();
    } else {
      return new com.skaria.avro.model.SomeRecord.Builder(other);
    }
  }

  /**
   * Creates a new SomeRecord RecordBuilder by copying an existing SomeRecord instance.
   * @param other The existing instance to copy.
   * @return A new SomeRecord RecordBuilder
   */
  public static com.skaria.avro.model.SomeRecord.Builder newBuilder(com.skaria.avro.model.SomeRecord other) {
    if (other == null) {
      return new com.skaria.avro.model.SomeRecord.Builder();
    } else {
      return new com.skaria.avro.model.SomeRecord.Builder(other);
    }
  }

  /**
   * RecordBuilder for SomeRecord instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SomeRecord>
    implements org.apache.avro.data.RecordBuilder<SomeRecord> {

    private com.skaria.avro.model.Identifier identifier;
    private com.skaria.avro.model.Identifier.Builder identifierBuilder;
    private com.skaria.avro.model.Id Id;
    private com.skaria.avro.model.Id.Builder IdBuilder;
    private java.time.Instant TIMESTAMP;
    private java.time.Instant RECEIVEDDATE;
    private java.time.Instant PRODUCEDDATE;
    private com.skaria.avro.model.Location POSITION;
    private com.skaria.avro.model.Location.Builder POSITIONBuilder;
    private java.lang.Integer MEASURE;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.skaria.avro.model.SomeRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.identifier)) {
        this.identifier = data().deepCopy(fields()[0].schema(), other.identifier);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (other.hasIdentifierBuilder()) {
        this.identifierBuilder = com.skaria.avro.model.Identifier.newBuilder(other.getIdentifierBuilder());
      }
      if (isValidValue(fields()[1], other.Id)) {
        this.Id = data().deepCopy(fields()[1].schema(), other.Id);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (other.hasIdBuilder()) {
        this.IdBuilder = com.skaria.avro.model.Id.newBuilder(other.getIdBuilder());
      }
      if (isValidValue(fields()[2], other.TIMESTAMP)) {
        this.TIMESTAMP = data().deepCopy(fields()[2].schema(), other.TIMESTAMP);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.RECEIVEDDATE)) {
        this.RECEIVEDDATE = data().deepCopy(fields()[3].schema(), other.RECEIVEDDATE);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.PRODUCEDDATE)) {
        this.PRODUCEDDATE = data().deepCopy(fields()[4].schema(), other.PRODUCEDDATE);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.POSITION)) {
        this.POSITION = data().deepCopy(fields()[5].schema(), other.POSITION);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (other.hasPOSITIONBuilder()) {
        this.POSITIONBuilder = com.skaria.avro.model.Location.newBuilder(other.getPOSITIONBuilder());
      }
      if (isValidValue(fields()[6], other.MEASURE)) {
        this.MEASURE = data().deepCopy(fields()[6].schema(), other.MEASURE);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
    }

    /**
     * Creates a Builder by copying an existing SomeRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(com.skaria.avro.model.SomeRecord other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.identifier)) {
        this.identifier = data().deepCopy(fields()[0].schema(), other.identifier);
        fieldSetFlags()[0] = true;
      }
      this.identifierBuilder = null;
      if (isValidValue(fields()[1], other.Id)) {
        this.Id = data().deepCopy(fields()[1].schema(), other.Id);
        fieldSetFlags()[1] = true;
      }
      this.IdBuilder = null;
      if (isValidValue(fields()[2], other.TIMESTAMP)) {
        this.TIMESTAMP = data().deepCopy(fields()[2].schema(), other.TIMESTAMP);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.RECEIVEDDATE)) {
        this.RECEIVEDDATE = data().deepCopy(fields()[3].schema(), other.RECEIVEDDATE);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.PRODUCEDDATE)) {
        this.PRODUCEDDATE = data().deepCopy(fields()[4].schema(), other.PRODUCEDDATE);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.POSITION)) {
        this.POSITION = data().deepCopy(fields()[5].schema(), other.POSITION);
        fieldSetFlags()[5] = true;
      }
      this.POSITIONBuilder = null;
      if (isValidValue(fields()[6], other.MEASURE)) {
        this.MEASURE = data().deepCopy(fields()[6].schema(), other.MEASURE);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'identifier' field.
      * @return The value.
      */
    public com.skaria.avro.model.Identifier getIdentifier() {
      return identifier;
    }

    /**
      * Gets the value of the 'identifier' field as an Optional&lt;com.skaria.avro.model.Identifier&gt;.
      * @return The value wrapped in an Optional&lt;com.skaria.avro.model.Identifier&gt;.
      */
    public Optional<com.skaria.avro.model.Identifier> getOptionalIdentifier() {
      return Optional.<com.skaria.avro.model.Identifier>ofNullable(identifier);
    }

    /**
      * Sets the value of the 'identifier' field.
      * @param value The value of 'identifier'.
      * @return This builder.
      */
    public com.skaria.avro.model.SomeRecord.Builder setIdentifier(com.skaria.avro.model.Identifier value) {
      validate(fields()[0], value);
      this.identifierBuilder = null;
      this.identifier = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'identifier' field has been set.
      * @return True if the 'identifier' field has been set, false otherwise.
      */
    public boolean hasIdentifier() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'identifier' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.skaria.avro.model.Identifier.Builder getIdentifierBuilder() {
      if (identifierBuilder == null) {
        if (hasIdentifier()) {
          setIdentifierBuilder(com.skaria.avro.model.Identifier.newBuilder(identifier));
        } else {
          setIdentifierBuilder(com.skaria.avro.model.Identifier.newBuilder());
        }
      }
      return identifierBuilder;
    }

    /**
     * Sets the Builder instance for the 'identifier' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.skaria.avro.model.SomeRecord.Builder setIdentifierBuilder(com.skaria.avro.model.Identifier.Builder value) {
      clearIdentifier();
      identifierBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'identifier' field has an active Builder instance
     * @return True if the 'identifier' field has an active Builder instance
     */
    public boolean hasIdentifierBuilder() {
      return identifierBuilder != null;
    }

    /**
      * Clears the value of the 'identifier' field.
      * @return This builder.
      */
    public com.skaria.avro.model.SomeRecord.Builder clearIdentifier() {
      identifier = null;
      identifierBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'Id' field.
      * @return The value.
      */
    public com.skaria.avro.model.Id getId() {
      return Id;
    }

    /**
      * Gets the value of the 'Id' field as an Optional&lt;com.skaria.avro.model.Id&gt;.
      * @return The value wrapped in an Optional&lt;com.skaria.avro.model.Id&gt;.
      */
    public Optional<com.skaria.avro.model.Id> getOptionalId() {
      return Optional.<com.skaria.avro.model.Id>ofNullable(Id);
    }

    /**
      * Sets the value of the 'Id' field.
      * @param value The value of 'Id'.
      * @return This builder.
      */
    public com.skaria.avro.model.SomeRecord.Builder setId(com.skaria.avro.model.Id value) {
      validate(fields()[1], value);
      this.IdBuilder = null;
      this.Id = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'Id' field has been set.
      * @return True if the 'Id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'Id' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.skaria.avro.model.Id.Builder getIdBuilder() {
      if (IdBuilder == null) {
        if (hasId()) {
          setIdBuilder(com.skaria.avro.model.Id.newBuilder(Id));
        } else {
          setIdBuilder(com.skaria.avro.model.Id.newBuilder());
        }
      }
      return IdBuilder;
    }

    /**
     * Sets the Builder instance for the 'Id' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.skaria.avro.model.SomeRecord.Builder setIdBuilder(com.skaria.avro.model.Id.Builder value) {
      clearId();
      IdBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'Id' field has an active Builder instance
     * @return True if the 'Id' field has an active Builder instance
     */
    public boolean hasIdBuilder() {
      return IdBuilder != null;
    }

    /**
      * Clears the value of the 'Id' field.
      * @return This builder.
      */
    public com.skaria.avro.model.SomeRecord.Builder clearId() {
      Id = null;
      IdBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'TIMESTAMP' field.
      * @return The value.
      */
    public java.time.Instant getTIMESTAMP() {
      return TIMESTAMP;
    }

    /**
      * Gets the value of the 'TIMESTAMP' field as an Optional&lt;java.time.Instant&gt;.
      * @return The value wrapped in an Optional&lt;java.time.Instant&gt;.
      */
    public Optional<java.time.Instant> getOptionalTIMESTAMP() {
      return Optional.<java.time.Instant>ofNullable(TIMESTAMP);
    }

    /**
      * Sets the value of the 'TIMESTAMP' field.
      * @param value The value of 'TIMESTAMP'.
      * @return This builder.
      */
    public com.skaria.avro.model.SomeRecord.Builder setTIMESTAMP(java.time.Instant value) {
      validate(fields()[2], value);
      this.TIMESTAMP = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'TIMESTAMP' field has been set.
      * @return True if the 'TIMESTAMP' field has been set, false otherwise.
      */
    public boolean hasTIMESTAMP() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'TIMESTAMP' field.
      * @return This builder.
      */
    public com.skaria.avro.model.SomeRecord.Builder clearTIMESTAMP() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'RECEIVEDDATE' field.
      * @return The value.
      */
    public java.time.Instant getRECEIVEDDATE() {
      return RECEIVEDDATE;
    }

    /**
      * Gets the value of the 'RECEIVEDDATE' field as an Optional&lt;java.time.Instant&gt;.
      * @return The value wrapped in an Optional&lt;java.time.Instant&gt;.
      */
    public Optional<java.time.Instant> getOptionalRECEIVEDDATE() {
      return Optional.<java.time.Instant>ofNullable(RECEIVEDDATE);
    }

    /**
      * Sets the value of the 'RECEIVEDDATE' field.
      * @param value The value of 'RECEIVEDDATE'.
      * @return This builder.
      */
    public com.skaria.avro.model.SomeRecord.Builder setRECEIVEDDATE(java.time.Instant value) {
      validate(fields()[3], value);
      this.RECEIVEDDATE = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'RECEIVEDDATE' field has been set.
      * @return True if the 'RECEIVEDDATE' field has been set, false otherwise.
      */
    public boolean hasRECEIVEDDATE() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'RECEIVEDDATE' field.
      * @return This builder.
      */
    public com.skaria.avro.model.SomeRecord.Builder clearRECEIVEDDATE() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'PRODUCEDDATE' field.
      * @return The value.
      */
    public java.time.Instant getPRODUCEDDATE() {
      return PRODUCEDDATE;
    }

    /**
      * Gets the value of the 'PRODUCEDDATE' field as an Optional&lt;java.time.Instant&gt;.
      * @return The value wrapped in an Optional&lt;java.time.Instant&gt;.
      */
    public Optional<java.time.Instant> getOptionalPRODUCEDDATE() {
      return Optional.<java.time.Instant>ofNullable(PRODUCEDDATE);
    }

    /**
      * Sets the value of the 'PRODUCEDDATE' field.
      * @param value The value of 'PRODUCEDDATE'.
      * @return This builder.
      */
    public com.skaria.avro.model.SomeRecord.Builder setPRODUCEDDATE(java.time.Instant value) {
      validate(fields()[4], value);
      this.PRODUCEDDATE = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'PRODUCEDDATE' field has been set.
      * @return True if the 'PRODUCEDDATE' field has been set, false otherwise.
      */
    public boolean hasPRODUCEDDATE() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'PRODUCEDDATE' field.
      * @return This builder.
      */
    public com.skaria.avro.model.SomeRecord.Builder clearPRODUCEDDATE() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'POSITION' field.
      * @return The value.
      */
    public com.skaria.avro.model.Location getPOSITION() {
      return POSITION;
    }

    /**
      * Gets the value of the 'POSITION' field as an Optional&lt;com.skaria.avro.model.Location&gt;.
      * @return The value wrapped in an Optional&lt;com.skaria.avro.model.Location&gt;.
      */
    public Optional<com.skaria.avro.model.Location> getOptionalPOSITION() {
      return Optional.<com.skaria.avro.model.Location>ofNullable(POSITION);
    }

    /**
      * Sets the value of the 'POSITION' field.
      * @param value The value of 'POSITION'.
      * @return This builder.
      */
    public com.skaria.avro.model.SomeRecord.Builder setPOSITION(com.skaria.avro.model.Location value) {
      validate(fields()[5], value);
      this.POSITIONBuilder = null;
      this.POSITION = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'POSITION' field has been set.
      * @return True if the 'POSITION' field has been set, false otherwise.
      */
    public boolean hasPOSITION() {
      return fieldSetFlags()[5];
    }

    /**
     * Gets the Builder instance for the 'POSITION' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.skaria.avro.model.Location.Builder getPOSITIONBuilder() {
      if (POSITIONBuilder == null) {
        if (hasPOSITION()) {
          setPOSITIONBuilder(com.skaria.avro.model.Location.newBuilder(POSITION));
        } else {
          setPOSITIONBuilder(com.skaria.avro.model.Location.newBuilder());
        }
      }
      return POSITIONBuilder;
    }

    /**
     * Sets the Builder instance for the 'POSITION' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.skaria.avro.model.SomeRecord.Builder setPOSITIONBuilder(com.skaria.avro.model.Location.Builder value) {
      clearPOSITION();
      POSITIONBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'POSITION' field has an active Builder instance
     * @return True if the 'POSITION' field has an active Builder instance
     */
    public boolean hasPOSITIONBuilder() {
      return POSITIONBuilder != null;
    }

    /**
      * Clears the value of the 'POSITION' field.
      * @return This builder.
      */
    public com.skaria.avro.model.SomeRecord.Builder clearPOSITION() {
      POSITION = null;
      POSITIONBuilder = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'MEASURE' field.
      * @return The value.
      */
    public java.lang.Integer getMEASURE() {
      return MEASURE;
    }

    /**
      * Gets the value of the 'MEASURE' field as an Optional&lt;java.lang.Integer&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.Integer&gt;.
      */
    public Optional<java.lang.Integer> getOptionalMEASURE() {
      return Optional.<java.lang.Integer>ofNullable(MEASURE);
    }

    /**
      * Sets the value of the 'MEASURE' field.
      * @param value The value of 'MEASURE'.
      * @return This builder.
      */
    public com.skaria.avro.model.SomeRecord.Builder setMEASURE(java.lang.Integer value) {
      validate(fields()[6], value);
      this.MEASURE = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'MEASURE' field has been set.
      * @return True if the 'MEASURE' field has been set, false otherwise.
      */
    public boolean hasMEASURE() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'MEASURE' field.
      * @return This builder.
      */
    public com.skaria.avro.model.SomeRecord.Builder clearMEASURE() {
      MEASURE = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public SomeRecord build() {
      try {
        SomeRecord record = new SomeRecord();
        if (identifierBuilder != null) {
          try {
            record.identifier = this.identifierBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("identifier"));
            throw e;
          }
        } else {
          record.identifier = fieldSetFlags()[0] ? this.identifier : (com.skaria.avro.model.Identifier) defaultValue(fields()[0]);
        }
        if (IdBuilder != null) {
          try {
            record.Id = this.IdBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("Id"));
            throw e;
          }
        } else {
          record.Id = fieldSetFlags()[1] ? this.Id : (com.skaria.avro.model.Id) defaultValue(fields()[1]);
        }
        record.TIMESTAMP = fieldSetFlags()[2] ? this.TIMESTAMP : (java.time.Instant) defaultValue(fields()[2]);
        record.RECEIVEDDATE = fieldSetFlags()[3] ? this.RECEIVEDDATE : (java.time.Instant) defaultValue(fields()[3]);
        record.PRODUCEDDATE = fieldSetFlags()[4] ? this.PRODUCEDDATE : (java.time.Instant) defaultValue(fields()[4]);
        if (POSITIONBuilder != null) {
          try {
            record.POSITION = this.POSITIONBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("POSITION"));
            throw e;
          }
        } else {
          record.POSITION = fieldSetFlags()[5] ? this.POSITION : (com.skaria.avro.model.Location) defaultValue(fields()[5]);
        }
        record.MEASURE = fieldSetFlags()[6] ? this.MEASURE : (java.lang.Integer) defaultValue(fields()[6]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<SomeRecord>
    WRITER$ = (org.apache.avro.io.DatumWriter<SomeRecord>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<SomeRecord>
    READER$ = (org.apache.avro.io.DatumReader<SomeRecord>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










