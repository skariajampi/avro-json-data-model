/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.skaria.avro.model.aggregate.domain;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;
import java.util.Optional;
/** Command Record */
@org.apache.avro.specific.AvroGenerated
public class CommandRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 2172660796951726487L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"CommandRecord\",\"namespace\":\"com.skaria.avro.model.aggregate.domain\",\"doc\":\"Command Record\",\"fields\":[{\"name\":\"commandType\",\"type\":{\"type\":\"enum\",\"name\":\"CommandType\",\"doc\":\"The list of Commands supported, a Cmd is a request to mutate the state of the system\",\"symbols\":[\"PROCESS_COMMAND\",\"ADD_IDENTIFIER_TO_SOME_LIST_COMMAND\",\"REMOVE_IDENTIFIER_FROM_SOME_LIST_COMMAND\",\"UPDATE_PERSON_COMMAND\"]},\"doc\":\"The type of domain model command\"},{\"name\":\"identifier\",\"type\":{\"type\":\"record\",\"name\":\"Identifier\",\"namespace\":\"com.skaria.avro.model\",\"fields\":[{\"name\":\"identifier\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}},{\"name\":\"creationTimestamp\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"},\"doc\":\"Timestamp of the Cmd\"},{\"name\":\"command\",\"type\":[{\"type\":\"record\",\"name\":\"ProcessCommandRecord\",\"fields\":[{\"name\":\"someRecord\",\"type\":{\"type\":\"record\",\"name\":\"SomeRecord\",\"namespace\":\"com.skaria.avro.model\",\"fields\":[{\"name\":\"identifier\",\"type\":\"Identifier\"},{\"name\":\"Id\",\"type\":{\"type\":\"record\",\"name\":\"Id\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}},{\"name\":\"TIMESTAMP\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"RECEIVEDDATE\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"PRODUCEDDATE\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"POSITION\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Location\",\"fields\":[{\"name\":\"latitude\",\"type\":\"double\"},{\"name\":\"longitude\",\"type\":\"double\"}]}]},{\"name\":\"MEASURE\",\"type\":[\"null\",\"int\"]}]}}]},{\"type\":\"record\",\"name\":\"AddIdentifierToSomeListCommandRecord\",\"fields\":[{\"name\":\"someList\",\"type\":{\"type\":\"record\",\"name\":\"SomeList\",\"namespace\":\"com.skaria.avro.model\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"record\",\"name\":\"SomeListId\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}},{\"name\":\"name\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"middlename\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"age\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"action\",\"type\":{\"type\":\"enum\",\"name\":\"Action\",\"symbols\":[\"STOP\",\"GO\"]}}]}}]},{\"type\":\"record\",\"name\":\"RemoveIdentifierFromListCommandRecord\",\"fields\":[{\"name\":\"listId\",\"type\":\"com.skaria.avro.model.Id\"}]},{\"type\":\"record\",\"name\":\"UpdatePersonCommandRecord\",\"fields\":[{\"name\":\"Person\",\"type\":{\"type\":\"record\",\"name\":\"Person\",\"namespace\":\"com.skaria.avro.model\",\"fields\":[{\"name\":\"person\",\"type\":\"Person\"}]}}]}],\"doc\":\"Union across the supported  Aggregate Commands\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<CommandRecord> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<CommandRecord> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<CommandRecord> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<CommandRecord> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<CommandRecord> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this CommandRecord to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a CommandRecord from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a CommandRecord instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static CommandRecord fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** The type of domain model command */
  private com.skaria.avro.model.aggregate.domain.CommandType commandType;
  private com.skaria.avro.model.Identifier identifier;
  /** Timestamp of the Cmd */
  private java.time.Instant creationTimestamp;
  /** Union across the supported  Aggregate Commands */
  private java.lang.Object command;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public CommandRecord() {}

  /**
   * All-args constructor.
   * @param commandType The type of domain model command
   * @param identifier The new value for identifier
   * @param creationTimestamp Timestamp of the Cmd
   * @param command Union across the supported  Aggregate Commands
   */
  public CommandRecord(com.skaria.avro.model.aggregate.domain.CommandType commandType, com.skaria.avro.model.Identifier identifier, java.time.Instant creationTimestamp, java.lang.Object command) {
    this.commandType = commandType;
    this.identifier = identifier;
    this.creationTimestamp = creationTimestamp.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    this.command = command;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return commandType;
    case 1: return identifier;
    case 2: return creationTimestamp;
    case 3: return command;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: commandType = (com.skaria.avro.model.aggregate.domain.CommandType)value$; break;
    case 1: identifier = (com.skaria.avro.model.Identifier)value$; break;
    case 2: creationTimestamp = (java.time.Instant)value$; break;
    case 3: command = value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'commandType' field.
   * @return The type of domain model command
   */
  public com.skaria.avro.model.aggregate.domain.CommandType getCommandType() {
    return commandType;
  }

  /**
   * Gets the value of the 'commandType' field as an Optional&lt;com.skaria.avro.model.aggregate.domain.CommandType&gt;.
   * The type of domain model command
   * @return The value wrapped in an Optional&lt;com.skaria.avro.model.aggregate.domain.CommandType&gt;.
   */
  public Optional<com.skaria.avro.model.aggregate.domain.CommandType> getOptionalCommandType() {
    return Optional.<com.skaria.avro.model.aggregate.domain.CommandType>ofNullable(commandType);
  }

  /**
   * Sets the value of the 'commandType' field.
   * The type of domain model command
   * @param value the value to set.
   */
  public void setCommandType(com.skaria.avro.model.aggregate.domain.CommandType value) {
    this.commandType = value;
  }

  /**
   * Gets the value of the 'identifier' field.
   * @return The value of the 'identifier' field.
   */
  public com.skaria.avro.model.Identifier getIdentifier() {
    return identifier;
  }

  /**
   * Gets the value of the 'identifier' field as an Optional&lt;com.skaria.avro.model.Identifier&gt;.
   * @return The value wrapped in an Optional&lt;com.skaria.avro.model.Identifier&gt;.
   */
  public Optional<com.skaria.avro.model.Identifier> getOptionalIdentifier() {
    return Optional.<com.skaria.avro.model.Identifier>ofNullable(identifier);
  }

  /**
   * Sets the value of the 'identifier' field.
   * @param value the value to set.
   */
  public void setIdentifier(com.skaria.avro.model.Identifier value) {
    this.identifier = value;
  }

  /**
   * Gets the value of the 'creationTimestamp' field.
   * @return Timestamp of the Cmd
   */
  public java.time.Instant getCreationTimestamp() {
    return creationTimestamp;
  }

  /**
   * Gets the value of the 'creationTimestamp' field as an Optional&lt;java.time.Instant&gt;.
   * Timestamp of the Cmd
   * @return The value wrapped in an Optional&lt;java.time.Instant&gt;.
   */
  public Optional<java.time.Instant> getOptionalCreationTimestamp() {
    return Optional.<java.time.Instant>ofNullable(creationTimestamp);
  }

  /**
   * Sets the value of the 'creationTimestamp' field.
   * Timestamp of the Cmd
   * @param value the value to set.
   */
  public void setCreationTimestamp(java.time.Instant value) {
    this.creationTimestamp = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Gets the value of the 'command' field.
   * @return Union across the supported  Aggregate Commands
   */
  public java.lang.Object getCommand() {
    return command;
  }

  /**
   * Gets the value of the 'command' field as an Optional&lt;java.lang.Object&gt;.
   * Union across the supported  Aggregate Commands
   * @return The value wrapped in an Optional&lt;java.lang.Object&gt;.
   */
  public Optional<java.lang.Object> getOptionalCommand() {
    return Optional.<java.lang.Object>ofNullable(command);
  }

  /**
   * Sets the value of the 'command' field.
   * Union across the supported  Aggregate Commands
   * @param value the value to set.
   */
  public void setCommand(java.lang.Object value) {
    this.command = value;
  }

  /**
   * Creates a new CommandRecord RecordBuilder.
   * @return A new CommandRecord RecordBuilder
   */
  public static com.skaria.avro.model.aggregate.domain.CommandRecord.Builder newBuilder() {
    return new com.skaria.avro.model.aggregate.domain.CommandRecord.Builder();
  }

  /**
   * Creates a new CommandRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new CommandRecord RecordBuilder
   */
  public static com.skaria.avro.model.aggregate.domain.CommandRecord.Builder newBuilder(com.skaria.avro.model.aggregate.domain.CommandRecord.Builder other) {
    if (other == null) {
      return new com.skaria.avro.model.aggregate.domain.CommandRecord.Builder();
    } else {
      return new com.skaria.avro.model.aggregate.domain.CommandRecord.Builder(other);
    }
  }

  /**
   * Creates a new CommandRecord RecordBuilder by copying an existing CommandRecord instance.
   * @param other The existing instance to copy.
   * @return A new CommandRecord RecordBuilder
   */
  public static com.skaria.avro.model.aggregate.domain.CommandRecord.Builder newBuilder(com.skaria.avro.model.aggregate.domain.CommandRecord other) {
    if (other == null) {
      return new com.skaria.avro.model.aggregate.domain.CommandRecord.Builder();
    } else {
      return new com.skaria.avro.model.aggregate.domain.CommandRecord.Builder(other);
    }
  }

  /**
   * RecordBuilder for CommandRecord instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<CommandRecord>
    implements org.apache.avro.data.RecordBuilder<CommandRecord> {

    /** The type of domain model command */
    private com.skaria.avro.model.aggregate.domain.CommandType commandType;
    private com.skaria.avro.model.Identifier identifier;
    private com.skaria.avro.model.Identifier.Builder identifierBuilder;
    /** Timestamp of the Cmd */
    private java.time.Instant creationTimestamp;
    /** Union across the supported  Aggregate Commands */
    private java.lang.Object command;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.skaria.avro.model.aggregate.domain.CommandRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.commandType)) {
        this.commandType = data().deepCopy(fields()[0].schema(), other.commandType);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.identifier)) {
        this.identifier = data().deepCopy(fields()[1].schema(), other.identifier);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (other.hasIdentifierBuilder()) {
        this.identifierBuilder = com.skaria.avro.model.Identifier.newBuilder(other.getIdentifierBuilder());
      }
      if (isValidValue(fields()[2], other.creationTimestamp)) {
        this.creationTimestamp = data().deepCopy(fields()[2].schema(), other.creationTimestamp);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.command)) {
        this.command = data().deepCopy(fields()[3].schema(), other.command);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing CommandRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(com.skaria.avro.model.aggregate.domain.CommandRecord other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.commandType)) {
        this.commandType = data().deepCopy(fields()[0].schema(), other.commandType);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.identifier)) {
        this.identifier = data().deepCopy(fields()[1].schema(), other.identifier);
        fieldSetFlags()[1] = true;
      }
      this.identifierBuilder = null;
      if (isValidValue(fields()[2], other.creationTimestamp)) {
        this.creationTimestamp = data().deepCopy(fields()[2].schema(), other.creationTimestamp);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.command)) {
        this.command = data().deepCopy(fields()[3].schema(), other.command);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'commandType' field.
      * The type of domain model command
      * @return The value.
      */
    public com.skaria.avro.model.aggregate.domain.CommandType getCommandType() {
      return commandType;
    }

    /**
      * Gets the value of the 'commandType' field as an Optional&lt;com.skaria.avro.model.aggregate.domain.CommandType&gt;.
      * The type of domain model command
      * @return The value wrapped in an Optional&lt;com.skaria.avro.model.aggregate.domain.CommandType&gt;.
      */
    public Optional<com.skaria.avro.model.aggregate.domain.CommandType> getOptionalCommandType() {
      return Optional.<com.skaria.avro.model.aggregate.domain.CommandType>ofNullable(commandType);
    }

    /**
      * Sets the value of the 'commandType' field.
      * The type of domain model command
      * @param value The value of 'commandType'.
      * @return This builder.
      */
    public com.skaria.avro.model.aggregate.domain.CommandRecord.Builder setCommandType(com.skaria.avro.model.aggregate.domain.CommandType value) {
      validate(fields()[0], value);
      this.commandType = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'commandType' field has been set.
      * The type of domain model command
      * @return True if the 'commandType' field has been set, false otherwise.
      */
    public boolean hasCommandType() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'commandType' field.
      * The type of domain model command
      * @return This builder.
      */
    public com.skaria.avro.model.aggregate.domain.CommandRecord.Builder clearCommandType() {
      commandType = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'identifier' field.
      * @return The value.
      */
    public com.skaria.avro.model.Identifier getIdentifier() {
      return identifier;
    }

    /**
      * Gets the value of the 'identifier' field as an Optional&lt;com.skaria.avro.model.Identifier&gt;.
      * @return The value wrapped in an Optional&lt;com.skaria.avro.model.Identifier&gt;.
      */
    public Optional<com.skaria.avro.model.Identifier> getOptionalIdentifier() {
      return Optional.<com.skaria.avro.model.Identifier>ofNullable(identifier);
    }

    /**
      * Sets the value of the 'identifier' field.
      * @param value The value of 'identifier'.
      * @return This builder.
      */
    public com.skaria.avro.model.aggregate.domain.CommandRecord.Builder setIdentifier(com.skaria.avro.model.Identifier value) {
      validate(fields()[1], value);
      this.identifierBuilder = null;
      this.identifier = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'identifier' field has been set.
      * @return True if the 'identifier' field has been set, false otherwise.
      */
    public boolean hasIdentifier() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'identifier' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.skaria.avro.model.Identifier.Builder getIdentifierBuilder() {
      if (identifierBuilder == null) {
        if (hasIdentifier()) {
          setIdentifierBuilder(com.skaria.avro.model.Identifier.newBuilder(identifier));
        } else {
          setIdentifierBuilder(com.skaria.avro.model.Identifier.newBuilder());
        }
      }
      return identifierBuilder;
    }

    /**
     * Sets the Builder instance for the 'identifier' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.skaria.avro.model.aggregate.domain.CommandRecord.Builder setIdentifierBuilder(com.skaria.avro.model.Identifier.Builder value) {
      clearIdentifier();
      identifierBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'identifier' field has an active Builder instance
     * @return True if the 'identifier' field has an active Builder instance
     */
    public boolean hasIdentifierBuilder() {
      return identifierBuilder != null;
    }

    /**
      * Clears the value of the 'identifier' field.
      * @return This builder.
      */
    public com.skaria.avro.model.aggregate.domain.CommandRecord.Builder clearIdentifier() {
      identifier = null;
      identifierBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'creationTimestamp' field.
      * Timestamp of the Cmd
      * @return The value.
      */
    public java.time.Instant getCreationTimestamp() {
      return creationTimestamp;
    }

    /**
      * Gets the value of the 'creationTimestamp' field as an Optional&lt;java.time.Instant&gt;.
      * Timestamp of the Cmd
      * @return The value wrapped in an Optional&lt;java.time.Instant&gt;.
      */
    public Optional<java.time.Instant> getOptionalCreationTimestamp() {
      return Optional.<java.time.Instant>ofNullable(creationTimestamp);
    }

    /**
      * Sets the value of the 'creationTimestamp' field.
      * Timestamp of the Cmd
      * @param value The value of 'creationTimestamp'.
      * @return This builder.
      */
    public com.skaria.avro.model.aggregate.domain.CommandRecord.Builder setCreationTimestamp(java.time.Instant value) {
      validate(fields()[2], value);
      this.creationTimestamp = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'creationTimestamp' field has been set.
      * Timestamp of the Cmd
      * @return True if the 'creationTimestamp' field has been set, false otherwise.
      */
    public boolean hasCreationTimestamp() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'creationTimestamp' field.
      * Timestamp of the Cmd
      * @return This builder.
      */
    public com.skaria.avro.model.aggregate.domain.CommandRecord.Builder clearCreationTimestamp() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'command' field.
      * Union across the supported  Aggregate Commands
      * @return The value.
      */
    public java.lang.Object getCommand() {
      return command;
    }

    /**
      * Gets the value of the 'command' field as an Optional&lt;java.lang.Object&gt;.
      * Union across the supported  Aggregate Commands
      * @return The value wrapped in an Optional&lt;java.lang.Object&gt;.
      */
    public Optional<java.lang.Object> getOptionalCommand() {
      return Optional.<java.lang.Object>ofNullable(command);
    }

    /**
      * Sets the value of the 'command' field.
      * Union across the supported  Aggregate Commands
      * @param value The value of 'command'.
      * @return This builder.
      */
    public com.skaria.avro.model.aggregate.domain.CommandRecord.Builder setCommand(java.lang.Object value) {
      validate(fields()[3], value);
      this.command = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'command' field has been set.
      * Union across the supported  Aggregate Commands
      * @return True if the 'command' field has been set, false otherwise.
      */
    public boolean hasCommand() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'command' field.
      * Union across the supported  Aggregate Commands
      * @return This builder.
      */
    public com.skaria.avro.model.aggregate.domain.CommandRecord.Builder clearCommand() {
      command = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public CommandRecord build() {
      try {
        CommandRecord record = new CommandRecord();
        record.commandType = fieldSetFlags()[0] ? this.commandType : (com.skaria.avro.model.aggregate.domain.CommandType) defaultValue(fields()[0]);
        if (identifierBuilder != null) {
          try {
            record.identifier = this.identifierBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("identifier"));
            throw e;
          }
        } else {
          record.identifier = fieldSetFlags()[1] ? this.identifier : (com.skaria.avro.model.Identifier) defaultValue(fields()[1]);
        }
        record.creationTimestamp = fieldSetFlags()[2] ? this.creationTimestamp : (java.time.Instant) defaultValue(fields()[2]);
        record.command = fieldSetFlags()[3] ? this.command :  defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<CommandRecord>
    WRITER$ = (org.apache.avro.io.DatumWriter<CommandRecord>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<CommandRecord>
    READER$ = (org.apache.avro.io.DatumReader<CommandRecord>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










