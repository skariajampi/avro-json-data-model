/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.skaria.avro.model.aggregate.domain;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;
import java.util.Optional;
@org.apache.avro.specific.AvroGenerated
public class RemoveIdentifierFromListCommandRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4633902502278675038L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"RemoveIdentifierFromListCommandRecord\",\"namespace\":\"com.skaria.avro.model.aggregate.domain\",\"fields\":[{\"name\":\"listId\",\"type\":{\"type\":\"record\",\"name\":\"Id\",\"namespace\":\"com.skaria.avro.model\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<RemoveIdentifierFromListCommandRecord> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<RemoveIdentifierFromListCommandRecord> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<RemoveIdentifierFromListCommandRecord> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<RemoveIdentifierFromListCommandRecord> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<RemoveIdentifierFromListCommandRecord> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this RemoveIdentifierFromListCommandRecord to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a RemoveIdentifierFromListCommandRecord from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a RemoveIdentifierFromListCommandRecord instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static RemoveIdentifierFromListCommandRecord fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private com.skaria.avro.model.Id listId;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public RemoveIdentifierFromListCommandRecord() {}

  /**
   * All-args constructor.
   * @param listId The new value for listId
   */
  public RemoveIdentifierFromListCommandRecord(com.skaria.avro.model.Id listId) {
    this.listId = listId;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return listId;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: listId = (com.skaria.avro.model.Id)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'listId' field.
   * @return The value of the 'listId' field.
   */
  public com.skaria.avro.model.Id getListId() {
    return listId;
  }

  /**
   * Gets the value of the 'listId' field as an Optional&lt;com.skaria.avro.model.Id&gt;.
   * @return The value wrapped in an Optional&lt;com.skaria.avro.model.Id&gt;.
   */
  public Optional<com.skaria.avro.model.Id> getOptionalListId() {
    return Optional.<com.skaria.avro.model.Id>ofNullable(listId);
  }

  /**
   * Sets the value of the 'listId' field.
   * @param value the value to set.
   */
  public void setListId(com.skaria.avro.model.Id value) {
    this.listId = value;
  }

  /**
   * Creates a new RemoveIdentifierFromListCommandRecord RecordBuilder.
   * @return A new RemoveIdentifierFromListCommandRecord RecordBuilder
   */
  public static com.skaria.avro.model.aggregate.domain.RemoveIdentifierFromListCommandRecord.Builder newBuilder() {
    return new com.skaria.avro.model.aggregate.domain.RemoveIdentifierFromListCommandRecord.Builder();
  }

  /**
   * Creates a new RemoveIdentifierFromListCommandRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new RemoveIdentifierFromListCommandRecord RecordBuilder
   */
  public static com.skaria.avro.model.aggregate.domain.RemoveIdentifierFromListCommandRecord.Builder newBuilder(com.skaria.avro.model.aggregate.domain.RemoveIdentifierFromListCommandRecord.Builder other) {
    if (other == null) {
      return new com.skaria.avro.model.aggregate.domain.RemoveIdentifierFromListCommandRecord.Builder();
    } else {
      return new com.skaria.avro.model.aggregate.domain.RemoveIdentifierFromListCommandRecord.Builder(other);
    }
  }

  /**
   * Creates a new RemoveIdentifierFromListCommandRecord RecordBuilder by copying an existing RemoveIdentifierFromListCommandRecord instance.
   * @param other The existing instance to copy.
   * @return A new RemoveIdentifierFromListCommandRecord RecordBuilder
   */
  public static com.skaria.avro.model.aggregate.domain.RemoveIdentifierFromListCommandRecord.Builder newBuilder(com.skaria.avro.model.aggregate.domain.RemoveIdentifierFromListCommandRecord other) {
    if (other == null) {
      return new com.skaria.avro.model.aggregate.domain.RemoveIdentifierFromListCommandRecord.Builder();
    } else {
      return new com.skaria.avro.model.aggregate.domain.RemoveIdentifierFromListCommandRecord.Builder(other);
    }
  }

  /**
   * RecordBuilder for RemoveIdentifierFromListCommandRecord instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<RemoveIdentifierFromListCommandRecord>
    implements org.apache.avro.data.RecordBuilder<RemoveIdentifierFromListCommandRecord> {

    private com.skaria.avro.model.Id listId;
    private com.skaria.avro.model.Id.Builder listIdBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.skaria.avro.model.aggregate.domain.RemoveIdentifierFromListCommandRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.listId)) {
        this.listId = data().deepCopy(fields()[0].schema(), other.listId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (other.hasListIdBuilder()) {
        this.listIdBuilder = com.skaria.avro.model.Id.newBuilder(other.getListIdBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing RemoveIdentifierFromListCommandRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(com.skaria.avro.model.aggregate.domain.RemoveIdentifierFromListCommandRecord other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.listId)) {
        this.listId = data().deepCopy(fields()[0].schema(), other.listId);
        fieldSetFlags()[0] = true;
      }
      this.listIdBuilder = null;
    }

    /**
      * Gets the value of the 'listId' field.
      * @return The value.
      */
    public com.skaria.avro.model.Id getListId() {
      return listId;
    }

    /**
      * Gets the value of the 'listId' field as an Optional&lt;com.skaria.avro.model.Id&gt;.
      * @return The value wrapped in an Optional&lt;com.skaria.avro.model.Id&gt;.
      */
    public Optional<com.skaria.avro.model.Id> getOptionalListId() {
      return Optional.<com.skaria.avro.model.Id>ofNullable(listId);
    }

    /**
      * Sets the value of the 'listId' field.
      * @param value The value of 'listId'.
      * @return This builder.
      */
    public com.skaria.avro.model.aggregate.domain.RemoveIdentifierFromListCommandRecord.Builder setListId(com.skaria.avro.model.Id value) {
      validate(fields()[0], value);
      this.listIdBuilder = null;
      this.listId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'listId' field has been set.
      * @return True if the 'listId' field has been set, false otherwise.
      */
    public boolean hasListId() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'listId' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.skaria.avro.model.Id.Builder getListIdBuilder() {
      if (listIdBuilder == null) {
        if (hasListId()) {
          setListIdBuilder(com.skaria.avro.model.Id.newBuilder(listId));
        } else {
          setListIdBuilder(com.skaria.avro.model.Id.newBuilder());
        }
      }
      return listIdBuilder;
    }

    /**
     * Sets the Builder instance for the 'listId' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.skaria.avro.model.aggregate.domain.RemoveIdentifierFromListCommandRecord.Builder setListIdBuilder(com.skaria.avro.model.Id.Builder value) {
      clearListId();
      listIdBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'listId' field has an active Builder instance
     * @return True if the 'listId' field has an active Builder instance
     */
    public boolean hasListIdBuilder() {
      return listIdBuilder != null;
    }

    /**
      * Clears the value of the 'listId' field.
      * @return This builder.
      */
    public com.skaria.avro.model.aggregate.domain.RemoveIdentifierFromListCommandRecord.Builder clearListId() {
      listId = null;
      listIdBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public RemoveIdentifierFromListCommandRecord build() {
      try {
        RemoveIdentifierFromListCommandRecord record = new RemoveIdentifierFromListCommandRecord();
        if (listIdBuilder != null) {
          try {
            record.listId = this.listIdBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("listId"));
            throw e;
          }
        } else {
          record.listId = fieldSetFlags()[0] ? this.listId : (com.skaria.avro.model.Id) defaultValue(fields()[0]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<RemoveIdentifierFromListCommandRecord>
    WRITER$ = (org.apache.avro.io.DatumWriter<RemoveIdentifierFromListCommandRecord>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<RemoveIdentifierFromListCommandRecord>
    READER$ = (org.apache.avro.io.DatumReader<RemoveIdentifierFromListCommandRecord>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    this.listId.customEncode(out);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (this.listId == null) {
        this.listId = new com.skaria.avro.model.Id();
      }
      this.listId.customDecode(in);

    } else {
      for (int i = 0; i < 1; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (this.listId == null) {
            this.listId = new com.skaria.avro.model.Id();
          }
          this.listId.customDecode(in);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










