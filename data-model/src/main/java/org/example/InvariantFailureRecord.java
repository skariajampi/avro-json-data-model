/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.example;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;
import java.util.Optional;
@org.apache.avro.specific.AvroGenerated
public class InvariantFailureRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3892766854921510050L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"InvariantFailureRecord\",\"namespace\":\"org.example\",\"fields\":[{\"name\":\"invariantId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"invariantName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"externalDescription\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"internalDescription\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<InvariantFailureRecord> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<InvariantFailureRecord> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<InvariantFailureRecord> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<InvariantFailureRecord> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<InvariantFailureRecord> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this InvariantFailureRecord to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a InvariantFailureRecord from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a InvariantFailureRecord instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static InvariantFailureRecord fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.String invariantId;
  private java.lang.String invariantName;
  private java.lang.String externalDescription;
  private java.lang.String internalDescription;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public InvariantFailureRecord() {}

  /**
   * All-args constructor.
   * @param invariantId The new value for invariantId
   * @param invariantName The new value for invariantName
   * @param externalDescription The new value for externalDescription
   * @param internalDescription The new value for internalDescription
   */
  public InvariantFailureRecord(java.lang.String invariantId, java.lang.String invariantName, java.lang.String externalDescription, java.lang.String internalDescription) {
    this.invariantId = invariantId;
    this.invariantName = invariantName;
    this.externalDescription = externalDescription;
    this.internalDescription = internalDescription;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return invariantId;
    case 1: return invariantName;
    case 2: return externalDescription;
    case 3: return internalDescription;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: invariantId = value$ != null ? value$.toString() : null; break;
    case 1: invariantName = value$ != null ? value$.toString() : null; break;
    case 2: externalDescription = value$ != null ? value$.toString() : null; break;
    case 3: internalDescription = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'invariantId' field.
   * @return The value of the 'invariantId' field.
   */
  public java.lang.String getInvariantId() {
    return invariantId;
  }

  /**
   * Gets the value of the 'invariantId' field as an Optional&lt;java.lang.String&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
   */
  public Optional<java.lang.String> getOptionalInvariantId() {
    return Optional.<java.lang.String>ofNullable(invariantId);
  }

  /**
   * Sets the value of the 'invariantId' field.
   * @param value the value to set.
   */
  public void setInvariantId(java.lang.String value) {
    this.invariantId = value;
  }

  /**
   * Gets the value of the 'invariantName' field.
   * @return The value of the 'invariantName' field.
   */
  public java.lang.String getInvariantName() {
    return invariantName;
  }

  /**
   * Gets the value of the 'invariantName' field as an Optional&lt;java.lang.String&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
   */
  public Optional<java.lang.String> getOptionalInvariantName() {
    return Optional.<java.lang.String>ofNullable(invariantName);
  }

  /**
   * Sets the value of the 'invariantName' field.
   * @param value the value to set.
   */
  public void setInvariantName(java.lang.String value) {
    this.invariantName = value;
  }

  /**
   * Gets the value of the 'externalDescription' field.
   * @return The value of the 'externalDescription' field.
   */
  public java.lang.String getExternalDescription() {
    return externalDescription;
  }

  /**
   * Gets the value of the 'externalDescription' field as an Optional&lt;java.lang.String&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
   */
  public Optional<java.lang.String> getOptionalExternalDescription() {
    return Optional.<java.lang.String>ofNullable(externalDescription);
  }

  /**
   * Sets the value of the 'externalDescription' field.
   * @param value the value to set.
   */
  public void setExternalDescription(java.lang.String value) {
    this.externalDescription = value;
  }

  /**
   * Gets the value of the 'internalDescription' field.
   * @return The value of the 'internalDescription' field.
   */
  public java.lang.String getInternalDescription() {
    return internalDescription;
  }

  /**
   * Gets the value of the 'internalDescription' field as an Optional&lt;java.lang.String&gt;.
   * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
   */
  public Optional<java.lang.String> getOptionalInternalDescription() {
    return Optional.<java.lang.String>ofNullable(internalDescription);
  }

  /**
   * Sets the value of the 'internalDescription' field.
   * @param value the value to set.
   */
  public void setInternalDescription(java.lang.String value) {
    this.internalDescription = value;
  }

  /**
   * Creates a new InvariantFailureRecord RecordBuilder.
   * @return A new InvariantFailureRecord RecordBuilder
   */
  public static org.example.InvariantFailureRecord.Builder newBuilder() {
    return new org.example.InvariantFailureRecord.Builder();
  }

  /**
   * Creates a new InvariantFailureRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new InvariantFailureRecord RecordBuilder
   */
  public static org.example.InvariantFailureRecord.Builder newBuilder(org.example.InvariantFailureRecord.Builder other) {
    if (other == null) {
      return new org.example.InvariantFailureRecord.Builder();
    } else {
      return new org.example.InvariantFailureRecord.Builder(other);
    }
  }

  /**
   * Creates a new InvariantFailureRecord RecordBuilder by copying an existing InvariantFailureRecord instance.
   * @param other The existing instance to copy.
   * @return A new InvariantFailureRecord RecordBuilder
   */
  public static org.example.InvariantFailureRecord.Builder newBuilder(org.example.InvariantFailureRecord other) {
    if (other == null) {
      return new org.example.InvariantFailureRecord.Builder();
    } else {
      return new org.example.InvariantFailureRecord.Builder(other);
    }
  }

  /**
   * RecordBuilder for InvariantFailureRecord instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<InvariantFailureRecord>
    implements org.apache.avro.data.RecordBuilder<InvariantFailureRecord> {

    private java.lang.String invariantId;
    private java.lang.String invariantName;
    private java.lang.String externalDescription;
    private java.lang.String internalDescription;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.example.InvariantFailureRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.invariantId)) {
        this.invariantId = data().deepCopy(fields()[0].schema(), other.invariantId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.invariantName)) {
        this.invariantName = data().deepCopy(fields()[1].schema(), other.invariantName);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.externalDescription)) {
        this.externalDescription = data().deepCopy(fields()[2].schema(), other.externalDescription);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.internalDescription)) {
        this.internalDescription = data().deepCopy(fields()[3].schema(), other.internalDescription);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing InvariantFailureRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(org.example.InvariantFailureRecord other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.invariantId)) {
        this.invariantId = data().deepCopy(fields()[0].schema(), other.invariantId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.invariantName)) {
        this.invariantName = data().deepCopy(fields()[1].schema(), other.invariantName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.externalDescription)) {
        this.externalDescription = data().deepCopy(fields()[2].schema(), other.externalDescription);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.internalDescription)) {
        this.internalDescription = data().deepCopy(fields()[3].schema(), other.internalDescription);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'invariantId' field.
      * @return The value.
      */
    public java.lang.String getInvariantId() {
      return invariantId;
    }

    /**
      * Gets the value of the 'invariantId' field as an Optional&lt;java.lang.String&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
      */
    public Optional<java.lang.String> getOptionalInvariantId() {
      return Optional.<java.lang.String>ofNullable(invariantId);
    }

    /**
      * Sets the value of the 'invariantId' field.
      * @param value The value of 'invariantId'.
      * @return This builder.
      */
    public org.example.InvariantFailureRecord.Builder setInvariantId(java.lang.String value) {
      validate(fields()[0], value);
      this.invariantId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'invariantId' field has been set.
      * @return True if the 'invariantId' field has been set, false otherwise.
      */
    public boolean hasInvariantId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'invariantId' field.
      * @return This builder.
      */
    public org.example.InvariantFailureRecord.Builder clearInvariantId() {
      invariantId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'invariantName' field.
      * @return The value.
      */
    public java.lang.String getInvariantName() {
      return invariantName;
    }

    /**
      * Gets the value of the 'invariantName' field as an Optional&lt;java.lang.String&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
      */
    public Optional<java.lang.String> getOptionalInvariantName() {
      return Optional.<java.lang.String>ofNullable(invariantName);
    }

    /**
      * Sets the value of the 'invariantName' field.
      * @param value The value of 'invariantName'.
      * @return This builder.
      */
    public org.example.InvariantFailureRecord.Builder setInvariantName(java.lang.String value) {
      validate(fields()[1], value);
      this.invariantName = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'invariantName' field has been set.
      * @return True if the 'invariantName' field has been set, false otherwise.
      */
    public boolean hasInvariantName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'invariantName' field.
      * @return This builder.
      */
    public org.example.InvariantFailureRecord.Builder clearInvariantName() {
      invariantName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'externalDescription' field.
      * @return The value.
      */
    public java.lang.String getExternalDescription() {
      return externalDescription;
    }

    /**
      * Gets the value of the 'externalDescription' field as an Optional&lt;java.lang.String&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
      */
    public Optional<java.lang.String> getOptionalExternalDescription() {
      return Optional.<java.lang.String>ofNullable(externalDescription);
    }

    /**
      * Sets the value of the 'externalDescription' field.
      * @param value The value of 'externalDescription'.
      * @return This builder.
      */
    public org.example.InvariantFailureRecord.Builder setExternalDescription(java.lang.String value) {
      validate(fields()[2], value);
      this.externalDescription = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'externalDescription' field has been set.
      * @return True if the 'externalDescription' field has been set, false otherwise.
      */
    public boolean hasExternalDescription() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'externalDescription' field.
      * @return This builder.
      */
    public org.example.InvariantFailureRecord.Builder clearExternalDescription() {
      externalDescription = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'internalDescription' field.
      * @return The value.
      */
    public java.lang.String getInternalDescription() {
      return internalDescription;
    }

    /**
      * Gets the value of the 'internalDescription' field as an Optional&lt;java.lang.String&gt;.
      * @return The value wrapped in an Optional&lt;java.lang.String&gt;.
      */
    public Optional<java.lang.String> getOptionalInternalDescription() {
      return Optional.<java.lang.String>ofNullable(internalDescription);
    }

    /**
      * Sets the value of the 'internalDescription' field.
      * @param value The value of 'internalDescription'.
      * @return This builder.
      */
    public org.example.InvariantFailureRecord.Builder setInternalDescription(java.lang.String value) {
      validate(fields()[3], value);
      this.internalDescription = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'internalDescription' field has been set.
      * @return True if the 'internalDescription' field has been set, false otherwise.
      */
    public boolean hasInternalDescription() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'internalDescription' field.
      * @return This builder.
      */
    public org.example.InvariantFailureRecord.Builder clearInternalDescription() {
      internalDescription = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public InvariantFailureRecord build() {
      try {
        InvariantFailureRecord record = new InvariantFailureRecord();
        record.invariantId = fieldSetFlags()[0] ? this.invariantId : (java.lang.String) defaultValue(fields()[0]);
        record.invariantName = fieldSetFlags()[1] ? this.invariantName : (java.lang.String) defaultValue(fields()[1]);
        record.externalDescription = fieldSetFlags()[2] ? this.externalDescription : (java.lang.String) defaultValue(fields()[2]);
        record.internalDescription = fieldSetFlags()[3] ? this.internalDescription : (java.lang.String) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<InvariantFailureRecord>
    WRITER$ = (org.apache.avro.io.DatumWriter<InvariantFailureRecord>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<InvariantFailureRecord>
    READER$ = (org.apache.avro.io.DatumReader<InvariantFailureRecord>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.invariantId);

    out.writeString(this.invariantName);

    out.writeString(this.externalDescription);

    out.writeString(this.internalDescription);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.invariantId = in.readString();

      this.invariantName = in.readString();

      this.externalDescription = in.readString();

      this.internalDescription = in.readString();

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.invariantId = in.readString();
          break;

        case 1:
          this.invariantName = in.readString();
          break;

        case 2:
          this.externalDescription = in.readString();
          break;

        case 3:
          this.internalDescription = in.readString();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










